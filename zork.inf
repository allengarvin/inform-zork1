Constant DEBUG;
Constant Story "Zork";
Constant Headline ": The Great Underground Empire^
        Copyright (c) 1981, 1982, 1983 Infocom (Activision).^
        ZORK is a registered trademark of Activision.^";

Release 1;

Constant SACK_OBJECT = large_bag;
Constant MAX_SCORE 350;
Constant TOOL_GROUP = "tools";
Constant WEAP_GROUP = "weapons";
Constant TREASURE_GROUP = "treasures";
Constant KEY_GROUP = "keys";
Constant DEATH_FINAL 3;

Constant THIEF_OUT_DESC "There is a suspicious-looking individual lying
  unconscious on the ground.";
Constant THIEF_DESC = "There is a suspicious-looking individual, holding a
  bag, leaning against one wall. He is armed with a vicious-looking stiletto.";

Replace FullScoreSub;
Replace ScoreArrival;
Replace NoteObjectAcquisitions;
Replace PushSub;
Replace FillSub;
Replace BurnSub;
Replace PraySub;
Replace AttackSub;
Replace TieSub;
Replace JumpSub;
Replace SmellSub;
Replace SqueezeSub;
Replace BlowSub;
Replace SwingSub;
Replace KissSub;
Replace ListenSub;
Replace LockSub;
Replace	ClimbSub;
Replace	LookUnderSub;

Include "Parser";
Include "zclock";

Global Load_max;
Global Load_allowed = 100;
Global Dead;
Global Grue_repellent;
Global Chimney_flag;
Global Thief_here;
Global Thief_engrossed;
Global Deaths;
Global Exorcism_candle;
Global Low_tide;
Global Won_flag;
Global Magic_flag;
Global Goodluck_flag = 1;
Global Dome_flag;

Array Forest_around table   ! 9145 (0x23b9)
    forest1
    forest2
    forest4
    forest_path
    clearing2
    forest1
;
Array Directions table
  n_to ne_to e_to se_to s_to sw_to w_to nw_to u_to d_to in_to out_to;
Array House_around table    ! 9133 (0x23ad)
    west_of_house
    north_of_house
    east_of_house
    south_of_house
    west_of_house
;
Array   Room_list table
    west_of_house   slide_room      mine1
    mine2           mine3           mine4
    machine_room    drafty_room     timber_room
    dead_end        ladder_bottom   ladder_top
    gas_room        smelly_room     shaft_room
    bat_room        squeaky_room    mine_entrance
    canyon_view     rocky_ledge     canyon_bottom
    end_of_rainbow  on_the_rainbow  aragain_falls
    sandy_cave      sandy_beach     shore
    river1          frigid_river    beach1
    beach2          river2          river3
    river4          dam_base        maintenance_room
    dam_lobby       dam             altar
    temple          torch_room      dome_room
    egyptian_room   engravings_cave land_of_the_dead
    entrance_to_hades   chasm       n_s_passage
    loud_room       damp_cave       deep_canyon
    round_room      e_w_passage     atlantis_room
    twisting_passage    winding_passage     narrow_passage
    cold_passage    cave1           cave2
    mirror_room2    mirror_room1    stream
    stream_view     reservoir_north reservoir
    reservoir_south treasure_room   strange_passage
    cyclops_room    maze8           maze9
    maze10          maze11          maze12
    grating_room    maze13          maze14
    maze15          maze16          maze17
    maze7           maze6           maze18
    maze5           maze19          maze2
    maze3           maze4           maze1
    studio          gallery         east_of_chasm
    the_troll_room  cellar          living_room
    attic           kitchen         clearing2
    clearing1       up_a_tree       forest_path
    forest4         forest3         forest2
    forest1         east_of_house   south_of_house
    north_of_house  stone_barrow;


Attribute vehicle;
Attribute staggered;
Attribute maze_room;
Attribute flame;
Attribute toolbit;
Attribute water_room;
Attribute rmungbit;
Attribute fightbit;
Attribute climbable;
Attribute drinkable;
Attribute weapon;
Attribute dry_land;
Attribute flammable;
Attribute sacred;
Attribute readable;
Attribute magic;

Include "melee.inf";

Property trophy_value 0;
Property value 0;
Property size 5;
Property land_to;
Property strength 0;

Fake_Action PouredOn;
Fake_Action Death;

[ AboveGround;
  switch( random(11) ) {
    1: return west_of_house;
    2: return north_of_house;
    3: return east_of_house;
    4: return south_of_house;
    5: return forest1;
    6: return forest2;
    7: return forest4;
    8: return forest_path;
    9: return clearing2;
    10: return clearing1;
    default: return canyon_view;
  }
];

[ RandomizeObjects z room itm nextitem ;
  if( z == 1 ) {
    if( brass_lantern in player ) {
      give brass_lantern ~on ~light;
      move brass_lantern to living_room;
    }
    if( gold_coffin in player )
      move gold_coffin to egyptian_room;
    sword.number = 0;
    nextitem = child(player);
    itm = nextitem;
    while( itm ) {
      nextitem = sibling(itm);
      if( itm provides trophy_value && itm.trophy_value > 0 ) {
        do {
          room = Room_list-->random(Room_list-->0);
        } until( room has dry_land && room hasnt light );
        move itm to room;
      } else
        move itm to AboveGround();
      itm = nextitem;
    }
    rtrue;
  }
];

[ AnyoneHere where;
  return FindItemWithAttr(where, animate);
];

[ AfterLife;
    if( Dead )
        "^It takes a talented person to be killed while already dead. YOU are 
         such a talent. Unfortunately, it takes a talented person to
         deal with it. I am not such a talent. Sorry.";

    if( Deaths >= 2 ) {
      "You clearly are a suicidal maniac. We don't allow psychotics in the
       cave, since they may harm other adventurers. Your remains will
       be installed in the Land of the Living Dead, where your fellow
       adventurers may gloat over them.";
    }

    if( Goodluck_flag == 0 )
        print "Bad luck, huh?^";
    deadflag = false;
    score = score - 10;

    print " ^   ****  You have died  **** ^^";
    if( parent(player) && parent(player) has enterable )
        move player to location;
    Deaths++;
    if( altar has visited ) {
         print "As you take your last breath, you feel relieved of your
           burdens. The feeling passes as you find yourself before the gates
           of Hell, where the spirits jeer at you and deny you entry. Your
           senses are disturbed. The objects in the dungeon appear indistinct,
           bleached of color, even unreal.^^";
         Dead = true;
         give selfobj light;
         PlayerTo(entrance_to_hades, 1);
    } else {
         print "Now, let's take a look here... Well, you probably deserve
                another chance. I can't quite fix you up completely, but you
                can't have everything.^^";
         PlayerTo(forest1, 1);
    }
    give trap_door ~visited;
    RandomizeObjects(1);
    KillInterrupts(1);
];

[ KillInterrupts z;
  if( z == 1 ) {
    StopDaemon(songbird);
    StopDaemon(cyclops);
    StopDaemon(sword);
    StopDaemon(brass_lantern);
    !QueueInterrupt(ExorcismDaemon)-->0 = 0;
    !QueueInterrupt(Exorcism2Daemon)-->0 = 0;
    !QueueInterrupt(LampDaemon)-->0 = 0;
    !QueueInterrupt(CandleDaemon)-->0 = 0;
    !QueueInterrupt(MatchDaemon)-->0 = 0;
    give matchbook ~light ~flame;
    rtrue;
  }
];
[ ScoreArrival;
  if (location hasnt visited) {
    give location visited;
    if( location provides value ) {
      score = score + location.value;
      places_score = places_score + location.value;
      location.value = 0;
    }
  }
];

[ NoteObjectAcquisitions i;
  objectloop (i in player && i hasnt moved )
  {   give i moved;
      if (i provides value)
      {   score = score + i.value;
          things_score = things_score + i.value;
      }
  }
];

[ Probability percent;
  if( Goodluck_flag == 0 )
    return percent > random(300);
  return percent > random(100);
];

[ GoNext tbl room i;
  for( i=1 : i < tbl-->0 : i++ )
    if( tbl-->i == room )
      return tbl-->(i+1);
  return room;
];

[ HasWeapon who i;
  for( i = child(who) : i : i = sibling(i) )
    if( i has weapon )
      return i;
  return 0;
];

[ InRoomContains item room i len;
  if( room provides contains ) {
    len = room.#contains;
    for( i = 0 : i < len / 2 : i++ )
      if( item == (room.contains)-->i )
        rtrue;
  }
  rfalse;
];

[ ForestRoom ;
  if( location == forest1 or forest2 or forest4 or forest_path or up_a_tree )
    return 1;
  return 0;
];

[ ForestAction ;
  StartDaemon(songbird);
];

[ JigsUp msg;
  print (string) msg, "^";
  deadflag = 1;
];

CompassDirection land_obj "landward" compass
  with  name 'land',
    door_dir land_to;

Class   Room;

Class Water_Quantity(10)
  with  name 'quantity' 'water' 'of' 'h2o' 'liquid' 'salty',
        short_name [;
            if( self has general )
                print "quantity of salty water";
            print "quantity of water";
            rtrue;
        ],
        before [;
            Drink:
                if( parent(self) has container && parent(self) hasnt open )
                    "You'll have to open ", (the) parent(self), ".";
                remove self;
                Water_Quantity.destroy(noun);
                "Thank you very much. I was rather thirsty (from all this
                talking, probably).";
        ],
        size 4,
  has   drinkable;

Object null_room "Null Room"; ! used for stuff in reservoir

Object  pair_of_hands "pair of hands"
  with  name 'bare' 'pair' 'hands' 'hand' 'of',
        found_in selfobj,
  has   scenery toolbit concealed;

Object  blast_of_air "blast of air"
  with  name 'lungs' 'air' 'mouth' 'breath',
        found_in selfobj,
  has   scenery concealed;

Room    west_of_house "West of House"   ! 180 / 0xb4
  with  description [;
            print "You are standing in an open field west of a white house, 
                with a boarded front door.";
            if (Won_flag) 
                print " A secret path leads southwest into the forest.";
            new_line;
            rtrue;
        ],
        in_to [;
            if( Won_flag )
                return stone_barrow;
            "The door is boarded and you can't remove the boards.";
        ],
        sw_to [;
            if( Won_flag )
                return stone_barrow;
            rfalse;
        ],
        se_to south_of_house,
        ne_to north_of_house,
        s_to south_of_house,
        w_to forest1,
        e_to "The door is boarded and you can't remove the boards.",
        n_to north_of_house,
        adjacent_rooms south_of_house north_of_house forest1 stone_barrow,
  has   dry_land sacred light;

Object  -> white_house "white house"
  with  name 'white' 'beautiful' 'colonial' 'house' 'home',
        description "The house is a beautiful colonial house which is 
            painted white. It is clear that the owners must have been 
            extremely wealthy.",
        before [;
            Find: 
                if( location == kitchen or living_room or attic )
                    "Why not find your brains.";
                if( location == clearing2 )
                    "It seems to be to the west.";
                if( location == east_of_house or west_of_house or
                        north_of_house or south_of_house )
                    "It's right here! Are you blind or something?";
                "It was here a minute ago.";
            Burn: "You must be joking.";
            Enter: 
                if( location == east_of_house ) {
                    if( kitchen_window has open )
                        << Go w_obj >>;
                    "The window is closed.";
                }
                "I can't see how to get in from here.";

            WalkAround:
                GoNext(House_around);
                rtrue;
        ],
        found_in kitchen living_room attic clearing2 east_of_house
            west_of_house south_of_house north_of_house clearing1,
  has   scenery;

Object  -> front_door "door"    ! 181 / 0xb5
  with  before [;
            Open: "The door cannot be opened.";
            Burn: "You cannot burn this door.";
            ! Poke: "You can't seem to damage the door.";
            LookBehind: "It won't open.";
        ],
        name 'door' 'front' 'boarded',
  has   scenery door;

Object  -> small_mailbox "small mailbox"    ! 160 / 0xa0
  with  capacity 10,
        before [;
            Take: "It is securely anchored.";
        ],
        name 'mailbox' 'box' 'small',
  has   static container openable;

Object  -> -> leaflet "leaflet" ! 161 / 0xa1
  with  description "~WELCOME TO ZORK!^^ZORK is a game of adventure, danger, 
            and low cunning. In it you will explore some of the most amazing 
            territory ever seen by mortals. No computer should be without 
            one!~^",
        size 2,
        name 'advertisement' 'leaflet' 'booklet' 'mail' 'small',
  has   readable flammable;

Object  -> cretin "cretin"
  with  short_name  [;  return L__M(##Miscellany, 18); ],
        description "That's difficult unless your eyes are prehensile.",
        before NULL,
        after NULL,
        life NULL,
        each_turn NULL,
        time_out NULL,
        describe NULL,
        add_to_scope 0,
        capacity 100,
        parse_name 0,
        orders 0,
        number 0,
        strength 0,
        before_implicit NULL,
  has   concealed animate proper transparent;

Room    clearing2 "Clearing"
  with  contains tree forest,
        description "You are in a small clearing in a well marked forest path 
            that extends to the east and west.",
        ! action ForestAction,
        u_to "There is no tree here suitable for climbing.",
        s_to forest4,
        w_to east_of_house,
        e_to canyon_view,
        n_to forest2,
        adjacent_rooms forest4 east_of_house canyon_view forest2,
  has   dry_land sacred light;


Object  -> songbird "songbird"
  with  name 'song' 'bird' 'songbird',
        before [;
            Take, Find: "The songbird is not here but is probably nearby.";
            Listen: "You can't hear the songbird now.";
            Follow: "It can't be followed.";
            default: "You can't see any songbird here.";
        ],
        daemon [;
            if( ForestRoom() == 0 )
                StopDaemon(self);
            else if( random(100) <= 15 )
                "You hear in the distance the chirping of a song bird.";
        ],
        found_in clearing2,
  has   scenery;

Object  -> forest "forest"
  with  name 'forest' 'trees' 'pines' 'hemlocks',
        before [;
            Listen: "The pines and the hemlocks seem to be murmuring.";
            Find: "You cannot see the forest for the trees.";
            ! Enter, Leave: "You will have to specify a direction.";
            WalkAround: return GoNext(Forest_around);
        ],
        found_in clearing2,
  has   scenery;

Room    clearing1 "Clearing"    ! 143 / 0x8f
  with  description [;
            print "You are in a clearing, with a forest surrounding you on 
                all sides. A path leads south.";
            if( grating has open )
                print "^There is an open grating, descending into darkness.";
            else if( grating hasnt concealed )
                print "^There is a grating securely fastened into the ground.";
            new_line;
            rtrue;
        ],
        d_to grating,
        s_to forest_path,
        w_to forest1,
        e_to forest2,
        n_to "The forest becomes impenetrable to the north.",
        name 'path',
        adjacent_rooms forest_path forest1 forest2 grating_room,
  has   dry_land sacred light;

Object  -> pile_of_leaves "pile of leaves"  ! 144 / 0x90
  with  description "On the ground is a pile of leaves.",
        size 25,
        before [;
            Count:  "There are 69,105 leaves here.";
        ],
        ! action LeavesAction,
        name 'leaves' 'leaf' 'pile',
  has   flammable;

[ BreakEgg;
  if( golden_canary in jeweled_egg ) {
     if( TestScope(jeweled_egg, player) )
       print (string) (broken_canary.initial), "^";
  } else
     remove broken_canary;
  move broken_egg to parent(jeweled_egg);
  remove jeweled_egg;
  rtrue;
];

Room    up_a_tree "Up a Tree"   ! 88 / 0x58
  with  contains tree forest songbird white_house,
        description [ item;
            print "You are about 10 feet above the ground nestled among
                 some large branches. The nearest branch above you is
                 above your reach.^";
            item = child(forest_path);
            if( item && sibling(item) ) {
                print "On the ground below you can see ";
                WriteListFrom(child(forest_path),
                    FULLINV_BIT + ENGLISH_BIT + RECURSE_BIT);
                ".";
            }
            rtrue;
        ],
        after [;
          Drop:
            if( noun == birds_nest && jeweled_egg in birds_nest ) {
              print "The nest falls to the ground, and the egg spills out
                     of it, seriously damaged.^";
              move jeweled_egg to forest_path;
              BreakEgg();
              move birds_nest to forest_path;
              rtrue;
            }
            if( noun == jeweled_egg ) {
              print "The egg falls to the ground and springs open,
                     seriously damaged.";
              move jeweled_egg to forest_path;
              BreakEgg();
              new_line;
              rtrue;
            }
            move noun to forest_path;
            print_ret (The) noun, " falls to the ground.";
        ],
        d_to forest_path,
        u_to "You cannot climb any higher.",
        adjacent_rooms forest_path,
  has   dry_land sacred light;

Object  -> birds_nest "bird's nest" ! 89 / 0x59
  with  capacity 20,
        initial [;
            print "Beside you on the branch is a small bird's nest.";
            if( jeweled_egg in self )
                 " In the bird's nest is a large egg encrusted with 
                    precious jewels, apparently scavenged by a childless
                    songbird. The egg is covered with fine gold inlay, and
                    ornamented in lapis lazuli and mother-of-pearl. Unlike
                    most eggs, this one is hinged and closed with a
                    delicate looking clasp. The egg appears extremely
                    fragile.";
            new_line;
            rtrue;
        ],
        name 'nest' 'birds',
  has   magic open container flammable;

Object  -> -> jeweled_egg "jewel-encrusted egg" ! 87 / 0x57
  with  capacity 6,
        trophy_value 5,
        take_value 5,
        ! action EggAction,
        name 'egg' 'treasure' 'birds' 'encrusted' 'jeweled' 'jewelled',
        list_together TREASURE_GROUP,
  has   magic container;

Object  -> -> -> golden_canary "golden clockwork canary"    ! 84 / 0x54
  with  trophy_value 4,
        take_value 6,
        initial "There is a golden clockwork canary nestled in the egg. It has ruby eyes and a silver beak. Through a crystal window below its left wing you can see intricate machinery inside. It appears to have wound down.",
        ! action CanaryAction,
        name 'canary' 'treasure' 'blockwork' 'gold' 'golden',
        list_together TREASURE_GROUP,
  has   magic;

Room    forest_path "Forest Path"   ! 75 / 0x4b
  with  contains songbird white_house forest,
        description "This is a path winding through a dimly lit forest. The path heads north-south here. One particularly large tree with some low branches stands at the edge of the path.",
        initial ForestAction,
        u_to up_a_tree,
        s_to north_of_house,
        w_to forest1,
        e_to forest2,
        n_to clearing1,
        name 'path',
        adjacent_rooms clearing1 forest1 forest2 up_a_tree north_of_house,
  has   dry_land sacred light;

Object  ->  tree "tree"    ! 241 / 0xf1
  with  name 'tree' 'branch' 'large' 'storm',
        before [;
            Climb, ClimbUp, ClimbDown:
                if( location == forest_path )
                    << Go u_obj >>;
        ],
        found_in forest_path forest4 forest3,
  has   scenery climbable;

Room    forest4 "Forest"    ! 76 / 0x4c
  with  contains songbird white_house forest,
        description "This is a dimly lit forest, with large trees all around.",
        ! action ForestAction,
        u_to "There is no tree here suitable for climbing.",
        nw_to south_of_house,
        s_to "Storm-tossed trees block your way.",
        w_to forest1,
        e_to "The rank undergrowth prevents eastward movement.",
        n_to clearing2,
  has   dry_land sacred light;

Room    forest3 "Forest"    ! 239 / 0xef
  with  contains white_house,
        description "The forest thins out, revealing impassable mountains.",
        u_to "The mountains are impassable.",
        s_to forest2,
        w_to forest2,
        e_to "The mountains are impassable.",
        n_to forest2,
  has   dry_land sacred light;

Object  -> mountain_range "mountain range"  ! 240 / 0xf0
  with  before [;
            Climb, ClimbUp:
                "Don't you believe me? The mountains are impassable!";
        ],
        name 'mountain' 'range' 'impassable' 'flathead',
  has   scenery climbable;

Room    forest2 "Forest"    ! 77 / 0x4d
  with  contains tree songbird white_house forest,
        description "This is a dimly lit forest, with large trees all around.",
        initial ForestAction,
        u_to "There is no tree here suitable for climbing.",
        s_to clearing2,
        w_to forest_path,
        e_to forest3,
        n_to "The forest becomes impenetrable to the north.",
  has   dry_land sacred light;

Room    forest1 "Forest"    ! 78 / 0x4e
  with  contains tree songbird white_house forest,
        description "This is a forest, with trees in all directions. To the 
            east, there appears to be sunlight.",
        initial ForestAction,
        u_to "There is no tree here suitable for climbing.",
        s_to forest4,
        w_to "You would need a machete to go further west.",
        e_to forest_path,
        n_to clearing1,
        name 'sun' 'sunlight',
  has   dry_land sacred light;

Room    east_of_house "Behind House"    ! 79 / 0x4f
  with  contains white_house,
        description [;
            print "You are behind the white house. A path leads into the 
                forest to the east. In one corner of the house there is a 
                small window which is ";
            if( kitchen_window has open )
                "open.";
             "slightly ajar.";
        ],
        in_to kitchen_window,
        sw_to south_of_house,
        nw_to north_of_house,
        s_to south_of_house,
        w_to kitchen_window,
        e_to clearing2,
        n_to north_of_house,
  has   dry_land sacred light;

Object  -> kitchen_window "kitchen window"
  with  door_dir [;
            if( location == east_of_house )
                return w_to;
            return e_to;
        ],
        door_to [;
            if( location == east_of_house )
                return kitchen;
            return east_of_house;
        ],
        found_in east_of_house kitchen,
        description [;
            if( self hasnt general )
                "The window is slightly ajar, but not enough to allow entry.";
            rfalse;
        ],
        Before [;
            LookIn:
                print "You can see ";
                if( location == kitchen )
                    "what appears to be a kitchen.";
                "a clear area leading towards a forest.";
        ],
        after [;
            Open: "With great effort, you open the window far enough to 
                allow entry.";
            Close: "The window closes (more easily than it opened).";
        ],
        name 'window' 'kitchen' 'small',
  has   scenery door openable;

Room    south_of_house "South of House" ! 80 / 0x50
  with  contains white_house,
        description "You are facing the south side of a white house. There is 
            no door here, and all the windows are boarded.",
        nw_to west_of_house,
        ne_to east_of_house,
        s_to forest4,
        w_to west_of_house,
        e_to east_of_house,
        n_to "The windows are all boarded.",
  has   dry_land sacred light;

Object  -> boarded_window "boarded window"    ! 182 / 0xb6
  with  before [;
            Open: "The windows are boarded and can't be opened.";
            ! Poke: "You can't break the windows open.";
        ],
        name 'window' 'boarded',
        found_in south_of_house north_of_house,
  has   scenery;

Object   -> board "board" 
  with  name 'boards' 'board',
        before [;
            Take: "The boards are securely fastened.";
        ],
        description "The boards are securely fastened.",
        found_in south_of_house north_of_house west_of_house,
  has   scenery;

Room    north_of_house "North of House" ! 81 / 0x51
  with  contains white_house,
        description "You are facing the north side of a white house. There is no door here, and all the windows are boarded up. To the north a narrow path winds through the trees.",
        sw_to west_of_house,
        se_to east_of_house,
        s_to "The windows are all boarded.",
        w_to west_of_house,
        e_to east_of_house,
        n_to forest_path,
  has   dry_land sacred light;

Room    stone_barrow "Stone Barrow" ! 178 / 0xb2
  with  description "You are standing in front of a massive barrow of stone. In the east face is a huge stone door which is open. You cannot see into the dark of the tomb.",
        ! action BarrowAction,
        ne_to west_of_house,
  has   dry_land sacred light;

Object  -> stone_door "stone door"  ! 179 / 0xb3
  with  ! action BarrowDoorAction,
        name 'door' 'huge' 'stone',
  has   scenery door;

Object  -> stone_barrow_ob "stone barrow"   ! 177 / 0xb1
  with  ! action EnterBarrow,
        name 'barrow' 'tomb' 'massive' 'stone',
  has   scenery;

Object brass_bauble "beautiful brass bauble"    ! 85 / 0x55
  with  trophy_value 1,
        take_value 1,
        name 'bauble' 'treasure' 'brass' 'beautiful',
        list_together TREASURE_GROUP;

Object broken_egg "broken jewel-encrusted egg"  ! 86 / 0x56
  with  capacity 6,
        description "There is a somewhat ruined egg here.",
        trophy_value 2,
        name 'egg' 'treasure' 'broken' 'birds' 'encrusted' 'jewel',
        list_together TREASURE_GROUP,
  has   open container;

Object -> broken_canary "broken clockwork canary"   ! 83 / 0x53
  with  trophy_value 1,
        initial "There is a golden clockwork canary nestled in the egg. It 
            seems to have recently had a bad experience. The mountings
            for its jewel-like eyes are empty, and its silver beak is
            crumpled. Through a cracked crystal window below its left
            wing you can see the remains of intricate machinery. It is
            not clear what result winding it would have, as the mainspring
            seems sprung.",
        ! action CanaryAction,
        name 'canary' 'treasure' 'broken' 'clockwork' 'gold' 'golden';

Room    canyon_view "Canyon View"   ! 25 / 0x19
  with  contains river,
        description "You are at the top of the Great Canyon on its west wall. 
            From here there is a marvelous view of the canyon and parts
            of the Frigid River upstream. Across the canyon, the walls
            of the White Cliffs join the mighty ramparts of the Flathead
            Mountains to the east. Following the Canyon upstream to the
            north, Aragain Falls may be seen, complete with rainbow. The
            mighty Frigid River flows out from a great dark cavern. To
            the west and south can be seen an immense forest, stretching
            for miles around. A path leads northwest. It is possible to
            climb down into the canyon from here.",
        ! action ClifftopAction,
        d_to rocky_ledge,
        nw_to clearing2,
        s_to "Storm-tossed trees block your way.",
        w_to forest4,
        e_to rocky_ledge,
  has   dry_land sacred light;

Object  -> -> cliff "cliff"  ! 93 / 0x5d
  with  adjectives 'rocky' 'sheer',
        before [;
            ! Dive: "That would be very unwise. Perhaps even fatal.";
!    if (second ~= cliff || Verb ~= ##ThrowOver or ##Insert) rfalse;
!    print "The ", (name) noun, " tumbles into the river and is seen no more.";
!    new_line;
!    return Remove(noun);
!];
            Climb, ClimbUp, ClimbDown: 
                if( location == canyon_view )
                    << Go d_obj >>;
                if( location == rocky_ledge or canyon_bottom )
                    << Go u_obj >>;
                rfalse;
        ],
        name 'wall' 'cliff' 'walls' 'ledge',
        found_in canyon_view rocky_ledge canyon_bottom, 
  has   scenery climbable;

Room    rocky_ledge "Rocky Ledge"   ! 26 / 0x1a
  with  description "You are on a ledge about halfway up the wall of the 
            river canyon. You can see from here that the main flow from
            Aragain Falls twists along a passage which it is impossible
            for you to enter. Below you is the canyon bottom. Above you
            is more cliff, which appears climbable.",
        d_to canyon_bottom,
        u_to canyon_view,
  has   dry_land sacred light;

Object  -> river "river"
  with  before [;
            Receive:
                if( noun == player ) {
                    deadflag = 1;
                    "You splash around for a while, fighting the current, 
                     then you drown.";
                }
!                 if( noun == magic_boat )
!                     "You should get in the boat then launch it.";
            Enter: ! , Dive:
                "A look before leaping reveals that the river is wide and 
                 dangerous, with swift currents and large, half-hidden rocks. 
                 You decide to forgo your swim.";
        ],
        after [;
            Receive:
                remove noun;
                if( noun has flammable )
                    print_ret (The) noun, " floats for a moment, then sinks.";
                print_ret (The) noun, " splashes into the water and is gone 
                    forever.";
        ],
        name 'river' 'fridge',
        found_in rocky_ledge canyon_bottom end_of_rainbow,
  has   scenery container open;

Room    canyon_bottom "Canyon Bottom"   ! 27 / 0x1b
  with  description "You are beneath the walls of the river canyon which 
            may be climbable here. The lesser part of the runoff of
            Aragain Falls flows by below. To the north is a narrow path.",
        u_to rocky_ledge,
        n_to end_of_rainbow,
  has   dry_land sacred light;

Object  -> water "water"
  with  ! action WaterFunction,
        name 'water' 'quantity' 'of',
        before [ o;
            Insert:
                if( second == glass_bottle or magic_boat ) {
                    if( second hasnt open )
                        print_ret (The) second, " is closed.";
                    objectloop( o in second ) {
                        if( o ofclass Water_Quantity )
                            print_ret (The) second, " is already full of water.";
                    }
                    o = Water_Quantity.create();
                    move o to second;
                    print_ret (The) second, " is now full of water.";
                }
            Take: "The water slips through your fingers.";
            Drink: "Thank you very much. It really hit the spot.";
        ],
        found_in canyon_bottom end_of_rainbow aragain_falls sandy_beach
            shore stream stream_view reservoir_north reservoir 
            reservoir_south dam dam_base beach1 beach2 river1 river2
            river3 river4,
  has   drinkable scenery;

Room    end_of_rainbow "End of Rainbow" ! 136 / 0x88
  with  description "You are on a small, rocky beach on the continuation 
            of the Frigid River past the Falls. The beach is narrow due
            to the presence of the White Cliffs. The river canyon opens
            here and sunlight shines in from above. A rainbow crosses
            over the falls to the east and a narrow path continues to
            the southwest.",
!        u_to [; if( Rainbow_flag ) return on_the_rainbow; rfalse; ],
!        ne_to [; if( Rainbow_flag ) return on_the_rainbow; rfalse; ],
!        e_to [; if( Rainbow_flag ) return on_the_rainbow; rfalse; ],
        sw_to canyon_bottom,
  has   dry_land light;

Object  -> rainbow "rainbow"  ! 132 / 0x84
  with  name 'rainbow',
        found_in canyon_view end_of_rainbow on_the_rainbow,
        before [;
            Enter, Cross, Climb:
                if( location == canyon_view )
                    "From here?!?";
                if( self hasnt general )
                    "Can you walk on water vapor?";
                if( location == aragain_falls )
                    PlayerTo(end_of_rainbow);
                else if( location == end_of_rainbow )
                    PlayerTo(aragain_falls);
                else
                    "You'll have to say which way...";
                LookUnder:
                    "The Frigid River flows under the rainbow.";
        ],
  has   scenery climbable;

Object  -> pot_of_gold "pot of gold"    ! 137 / 0x89
  with  trophy_value 10,
        take_value 10,
        initial "At the end of the rainbow is a pot of gold.",
        size 15,
        name 'pot' 'gold' 'treasure',
  has   concealed;

! ---------------------------INSIDE---------------------------------

Room    strange_passage "Strange Passage"
  with  description "This is a long passage. To the west is one entrance. On
          the east there is an old wooden door, with a large opening
          in it (about cyclops sized).",
        in_to cyclops_room,
        w_to cyclops_room,
        e_to living_room,
        name 'entrance' 'opening',
  has   dry_land;

Room    living_room "Living Room"   ! 193 / 0xc1
  with  ! pseudo 'nails' PseudoNailAction 'nail' PseudoNailAction,
        ! action LivingRoomAction,
        description [ ;
            print "You are in the living room. There is a doorway to the east";
            if (Magic_flag) {
                print ". To the west is a cyclops-shaped opening in an old 
                    wooden door, above which is some strange gothic lettering, ";
            } else {
                print ", a wooden door with strange gothic lettering to the 
                    west, which appears to be nailed shut, ";
            }
            print "a trophy case, ";
            if (carpet has general && trap_door has open) {
                "and a rug lying beside an open trap door.";
            } else if( carpet has general ) {
                "and a closed trap door at your feet.";
            } else if( trap_door has open ) {
                "and an open trap door at your feet.";
            }
            "and a large oriental rug in the center of the room.";
        ],
        d_to trap_door,
        w_to [;
            if( Magic_flag )
                return strange_passage;
            "The door is nailed shut.";
        ],
        e_to kitchen,
  has   dry_land sacred light;

[ CheckTreasures t;
    if( trophy_case has general )
        rtrue;
    if( jeweled_egg in t && large_emerald in t && torch in t &&
             trunk_of_jewels in t && platinum_bar in t &&
            bracelet in t && jade_figurine in t && bag_of_coins in t &&
             chalice in t && golden_canary in t &&
            brass_bauble in t && scarab in t && pot_of_gold in t &&
             huge_diamond in t && painting in t &&
            crystal_skull in t && crystal_trident in t && gold_coffin in t &&
        sceptre in t ) {
        give trophy_case general;
        move ancient_map to living_room;
        give ancient_map ~concealed;
        give west_of_house ~visited;
        "An almost inaudible voice whispers in your ear, ~Look to your treasures
         for the final secret.~";
    }
];

Object  -> trophy_case "trophy case"    ! 194 / 0xc2
  with  capacity 10000,
        number 0,
        ! action TrophyAction,
        before [;
            Take: "The trophy case is securely fastened to the wall.";
        ],
        after [;
            Receive:
                if( noun provides trophy_value && self hasnt general ) {
                    score = score + noun.trophy_value;
                    self.number = self.number + noun.trophy_value;
                    give self ~scenery;
                    CheckTreasures(self);
                }
                rfalse;
            LetGo:
                if( noun provides trophy_value && self hasnt general ) {
                    score = score - noun.trophy_value;
                    self.number = self.number - noun.trophy_value;
                    if( ~~child(self) )
                        give self scenery;
                }
                rfalse;
        ],
        name 'case' 'trophy',
  has   magic transparent scenery container openable;

Object  -> -> ancient_map "ancient map" ! 109 / 0x6d
  with  description "The map shows a forest with three clearings. The largest 
            clearing contains a house. Three paths leave the large
            clearing. One of these paths, leading southwest, is marked
            ~To Stone Barrow~.",
        initial "In the trophy case is an ancient parchment which appears to 
            be a map.",
        size 2,
        name 'parchment' 'map' 'antique' 'ancient' 'old',
  has   concealed readable;

Object  -> sword "sword"
  with  number 0,
        initial "Above the trophy case hangs an elvish sword of great 
            antiquity.",
        size 30,
        ! action SwordAction,
        description [;
            if( self.number == 1 )
                "Your sword is glowing with a faint blue glow.";
            if( self.number > 1 )
                "Your sword is glowing very brightly.";
        ],
        after [;
            Take:
                StartDaemon(self);
                if( self.number ) {
                    PrintOrRun(self, description);
                    rtrue;
                }
                rfalse;
            Drop, Insert:
                StopDaemon(self);
                rfalse;
        ],
        daemon [ o i dir rm;
            if( sword notin player )
                rtrue;
            o = AnyoneHere(real_location);
            if( o ) {
                if( self.number == 2 )
                    rtrue;
                self.number = 2;
                "Your sword is glowing very brightly.";
            }
            for( i=1 : i <= Directions-->0 : i = i++ ) {
                dir = Directions-->i;

                if( real_location provides dir &&
                        real_location.#dir == 2 ) {
                    rm = real_location.dir;
                    if( rm ofclass Object ) {
                        if( rm has door ) {
                            if( rm provides door_to ) {
                                rm = RunRoutines(rm, door_to);
                                if( ~~(rm ofclass Object) )
                                continue;
                            } else
                                continue;
                        }
                        o = AnyoneHere(rm);
                        if( o ofclass Object ) {
                        !print "DEBUG: sword: ", (object) o, "->", (object) rm, "^";
                            if( self.number == 1 )
                                rtrue;
                            self.number = 1;
                            "Your sword is glowing with a faint blue glow.";
                        }
                    }
                }
            }
            if( self.number ) {
                self.number = 0;
                "Your sword is no longer glowing.";
            }
        ],
        name 'sword' 'orcrist' 'glamdring' 'blade' 'elvish' 'old' 'antique',
        list_together WEAP_GROUP,
  has   weapon;

Object  -> wooden_door "wooden door"    ! 111 / 0x6f
  with  description "The engravings translate to ~This space intentionally 
            left blank.~",
        ! action DoorAction,
        name 'door' 'lettering' 'writing' 'wooden' 'gothic' 'strange' 'w//',
  has   transparent scenery readable door;

Object  -> brass_lantern "brass lantern"    ! 164 / 0xa4
  with  initial "A battery-powered brass lantern is on the trophy case.",
        size 15,
        name 'lamp' 'lantern' 'light' 'brass',
        number 385,
        after [;
            ThrowAt:
                print "The lamp has smashed into the floor";
                if( self has light ) {
                    print ", and the light has gone out.^";
                    StopTimer(self);
                } else
                    print ".^";
                remove self;
                move broken_lantern to location;
                rtrue;
            SwitchOn:
                give self light;
                StartDaemon(self);
            SwitchOff:
                give self ~light;
                StopDaemon(self);
        ],
        before [;
            SwitchOn:
                if( self.number <= 0 )
                    "A burned-out lamp won't light.";
                rfalse;
            SwitchOff:
                if( self.number <= 0 )
                    "The lamp has already burned out.";
                rfalse;
        ],
        description [;
            print "The lamp ";
            if( self.number <= 0 )
                "has burned out.";
            if( self has on )
                "is on.";
            "is off.";
        ],
        daemon [ fuel_left;
            if( self hasnt on ) { StopDaemon(self); rtrue; }
            fuel_left = --(self.number);
            if( self in player || self in location ) {
                if( fuel_left == 185 )
                    "The lamp appears a bit dimmer.";
                if( fuel_left == 85 )
                    "The lamp is definitely dimmer now.";
                if( fuel_left == 15 )
                    "The lamp is nearly out.";
                if( fuel_left == 0 )
                    print "You'd better have more light than from the brass
                        lantern.^";
            }
            if( fuel_left == 0 ) {
                StopDaemon(self);
                give self ~light ~on rmungbit ~switchable;
            }
        ],
  has   switchable;

Object  -> trap_door "trap door"    ! 183 / 0xb7
  with  found_in cellar living_room,
        description [;
            if( self hasnt open )
                "It's closed.";
            if( player in living_room )
                "You see a rickety staircase descending into darkness.";
        ],
        before [ ;
            Raise: << Open self >>;
            Lower: << Close self >>;
            Open, Unlock:
                if( player in living_room || self has open )
                    rfalse;
                "The door is locked from above.";
        ],
        after [;
            Open:
                "The door reluctantly opens to reveal a rickety staircase
                 descending into darkness.";
            Close:
                 if( player in living_room )
                     "The door swings shut and closes.";
                 give self ~visited;
                 "The door closes and locks.";
        ],
        door_to [;
            if( location == cellar ) return living_room; return cellar;
        ],
        door_dir [;
            if( location == cellar ) return u_to; return d_to;
        ],
        name 'door' 'trapdoor' 'trap-' 'cover' 'trap' 'dusty',
  has   concealed scenery door openable;

Object  -> carpet "carpet"  ! 192 / 0xc0
  with  name 'rug' 'carpet' 'large' 'oriental',
        before [;
            Raise: 
                print "The rug is too heavy to lift";
                if( self has general ) {
                    ".";
                }
                ", but in trying to take it you have noticed an irregularity 
                 beneath it.";
            Push:
                if( self has general ) 
                    "Having moved the carpet previously, you find it impossible 
                     to move it again.";
                give trap_door ~concealed;
                give self general;
                SetPronoun('it', trap_door);
                "With a great effort, the rug is moved to one side of the room, 
                 revealing the dusty cover of a closed trap door.";
            Take: "The rug is extremely heavy and cannot be carried.";
            LookUnder:
                if( carpet has general )
                    rfalse;
                "Underneath the rug is a closed trap door. As you drop the 
                 corner of the rug, the trap door is once again concealed 
                 from view.";
            SitOn, Enter:
                if( trap_door has concealed )
                    "As you sit, you notice an irregularity underneath it. 
                     Rather than be uncomfortable, you stand up again.";
                "I suppose you think it's a magic carpet?";
        ],
  has   scenery;

Object  broken_lantern "broken lantern"
  with  name 'lamp' 'lantern' 'broken',
;

Room    attic "Attic"   ! 201 / 0xc9
  with  contains stairs,
        description "This is the attic. The only exit is a stairway leading 
            down.",
        d_to kitchen,
  has   dry_land sacred;

Object  -> table "table"
  with  capacity 40,
        name 'table',
        after [;
            LetGo:
                if( noun == nasty_knife )
                    give self ~scenery;
                rfalse;
        ],
  has   open static supporter scenery;

Object  -> -> nasty_knife "nasty knife" ! 169 / 0xa9
  with  ! action NastyKnifeAction,
        name 'knives' 'knife' 'blade' 'nasty' 'unrusted',
        list_together WEAP_GROUP,
  has   weapon;

Object  -> rope "rope"  ! 129 / 0x81
  with  initial "A large coil of rope is lying in the corner.",
        size 10,
        before [;
            Tie:
                if( location ~= dome_room ) {
                    Dome_flag = false;
                    "You can't tie the rope to that.";
                }
                if( second ~= wooden_railing )
                    rfalse;
                if( Dome_flag )
                    "The rope is already tied to it.";
                print "The rope drops over the side and comes within ten feet 
                    of the floor.^";
                Dome_flag = true;
                give rope scenery;
                move rope to location;
                rtrue;
            ClimbDown:
                if( Dome_flag == 0 )
                    "The rope doesn't lead downward.";
                << Go d_obj >>;
            Take:
                if( Dome_flag )
                    "The rope is tied to the railing.";
                rfalse;
            Untie:
                if( Dome_flag == 0 )
                    "It is not tied to anything.";
                Dome_flag = false;
                give rope ~scenery;
                "The rope is now untied.";
        ],
        after [;
            Drop:
                if( location == dome_room && Dome_flag == 0 ) {
                    move rope to torch_room;
                    "The rope drops gently to the floor below.";
                }
            rfalse;
        ],
        name 'rope' 'hemp' 'coil' 'large',
  has   sacred;

Room    kitchen "Kitchen"   ! 203 / 0xcb
  with  description [;
            print "You are in the kitchen of the white house. A table seems to 
                have been used recently for the preparation of food. A
                passage leads to the west and a dark staircase can be
                seen leading upward. A dark chimney leads down and to
                the east is a small window which is ";
            if( kitchen_window has open )
                "open.";
            "slightly ajar.";
        ],
        react_before [;
            Climb, ClimbUp:
                if( noun == stairs )
                    << Go u_obj >>;
                rfalse;
            ClimbDown:
                "There are no stairs leading down.";
        ],
        value 10,
        out_to kitchen_window,
        e_to kitchen_window,
        d_to [;
            if( Chimney_flag )
                return studio;
            "Only Santa Claus climbs down chimneys.";
        ],
        u_to attic,
        w_to living_room,
  has   dry_land sacred light;

Object  -> chimney "chimney"  ! 234 / 0xea
  with  name 'chimney' 'dark' 'narrow',
        ! action ChimneyAction,
  has   scenery climbable;

Object  -> stairs "stairs"
  with  name 'stair' 'stairs' 'steps' 'staircase' 'stairway' 'stone' 'dark' 
            'marble' 'forbidding' 'steep',
        before [;
            Enter:
                "You should say whether you want to go up or down.";
            Climb:
                if( location == kitchen )
                    << Go u_obj >>;
            ClimbUp:
                if( location == kitchen )
                    << Go u_obj >>;
            ClimbDown:
                if( location == kitchen )
                    "There are no stairs leading down.";
        ],
        found_in kitchen living_room,
  has   scenery; 

Object  -> kitchen_table "kitchen table"    ! 204 / 0xcc
  with  capacity 50,
        name 'table' 'kitchen',
  has   scenery supporter open;

Object  -> -> brown_sack "brown sack"   ! 224 / 0xe0
  with  capacity 15,
        initial "On the table is an elongated brown sack, smelling of hot 
            peppers.",
        size 3,
        before [;
            Smell:
                if( lunch notin self )
                    rfalse;
                "It smells of hot peppers.";
        ],
        name 'bag' 'sack' 'brown' 'elongated' 'smelly',
  has   container flammable;

Object  -> -> -> lunch "lunch"  ! 225 / 0xe1
  with  description "A hot pepper sandwich is here.",
        name 'food' 'sandwich' 'lunch' 'dinner' 'hot' 'pepper',
  has   edible;

Object  -> -> -> clove_of_garlic "clove of garlic"  ! 189 / 0xbd
  with  name 'garlic' 'clove' 'of',
        after [;
            Eat:
                remove noun;
                "What the heck! You won't make friends this way, but nobody
                 around here is too friendly anyhow. Gulp!";
        ],

  has   edible;

Object  -> -> glass_bottle "glass bottle"   ! 236 / 0xec
  with  capacity 4,
        initial "A bottle is sitting on the table.",
        adjectives 'clear' 'glass',
        after [;
            Throw:
                print "The bottle hits the far wall and shatters.^";
                BottleFunction(1);
                rtrue;
            Poke, Attack, Destroy, Hatch:
                print "A brilliant maneuver destroys the bottle.^";
                BottleFunction(1);
                rtrue;
            Shake:
                if( self has open )
                    BottleFunction(0);
                rtrue;
        ],
        name 'bottle' 'container',
  has   transparent container openable;

[ BottleFunction broken o flag;
  objectloop( o in glass_bottle ) {
    if( o ofclass Water_Quantity ) {
      remove o;
      Water_Quantity.destroy(o);
      flag = true;
    }
  }
  if( true )
    print "The water spills to the floor and evaporates.^";

  if( broken )
    remove self;
  rtrue;
];

! -----------------------DUNGEON-----------------------------------

Room    cellar "Cellar"
  with  contains trap_door chute stairs,
        value 25,
        initial [;
            if( trap_door has open && trap_door hasnt visited ) {
                give trap_door ~open;
                give trap_door visited;
                        "The trap door crashes shut, and you hear someone
                 barring it.^";
            }
        ],
        description "You are in a dark and damp cellar with a narrow
            passageway leading north, and a crawlway to the south. On the
            west is the bottom of a steep metal ramp which is unclimbable.",
        u_to trap_door,
        s_to east_of_chasm,
        w_to "You try to ascend the ramp, but it is impossible, and you
            slide back down.",
        n_to the_troll_room,
  has   dry_land;

Object  ->  chute "chute"
  with  before [;
            Enter, Climb:
                if( location == cellar )
                    "You try to ascend the ramp, but it is impossible, and you
                     slide back down.";
                else {
                    print "You tumble down the slide....^";
                    << Go d_obj >>;
                }
            Receive:
                move noun to cellar;
                if( location == cellar )
                    print_ret (The) noun, " slides down and falls at your 
                        feet.";
                else
                    print_ret (The) noun, " falls into the slide and is gone.";
        ],
        name 'chute' 'ramp' 'slide' 'steep' 'metal',
        found_in cellar slide_room,
  has   scenery;

Room    east_of_chasm "East of Chasm"
  with  description "You are on the east edge of a chasm, the bottom of which
          cannot be seen. A narrow passage goes north, and the path
          you are on continues to the east.",
        d_to "The chasm probably leads straight to the infernal
            regions.",
        e_to gallery,
        n_to cellar,
  has   dry_land;

Object  -> chasm_ob "chasm"
  with  name 'chasm' 'pit' 'ravine' 'deep' 'infernal' 'regions',
        description "The chasm probably leads straight to the infernal
            regions.",
        before [;
            Cross: "It's too far to jump. You'll have to find a bridge.";
            Dive, Jump: "You look before leaping, and realize that you would
                never survive.";
        ],
        after [;
            Receive, ThrownAt:
                remove noun;
                print_ret (The) noun, " drops out of sight into the chasm.";
        ],
        found_in east_of_chasm chasm reservoir_south,
  has   container open scenery;

Room    gallery "Gallery"
  with  description "This is an art gallery. Most of the paintings have been
          stolen by vandals with exceptional taste. The vandals left
          through either the north or west exits.",
        w_to east_of_chasm,
        n_to studio,
  has   dry_land light;

Object  -> painting "painting"
  with  description "A painting by a neglected genius is here.",
        trophy_value 6,
        value 4,
        initial "Fortunately, there is still one chance for you to be a
          vandal, for on the far wall is a painting of unparalleled
          beauty.",
        size 15,
        before [;
            Cut, Poke:
                noun.trophy_value = 0;
                noun.value = 0;
                noun.description = "There is a worthless piece of canvas here.";
                print_ret "Congratulations! Unlike the other vandals, who 
                    merely stole the artist's masterpieces, you have destroyed 
                    one.";
        ],
        name 'painting' 'art' 'canvas' 'treasure' 'beautiful',
        list_together TREASURE_GROUP,
  has   flammable;

Room    studio "Studio"
  with  contains chimney,
        description "This appears to have been an artist's studio. The walls
          and floors are splattered with paints of 69 different
          colors. Strangely enough, nothing of value is hanging
          here. At the south end of the room is an open door (also
          covered with paint). A dark and narrow chimney leads up
          from a fireplace; although you might be able to get up it,
          it seems unlikely you could get back down.",
        u_to [ o;
            o = child(player);
            if( ~~o )
                "Going up empty-handed is a bad idea.";
            if( trap_door hasnt open )
                give trap_door ~visited;

            o = sibling(o);
            if( ~~o )
                return kitchen;
            if( sibling(o) || brass_lantern notin player )
                "You can't get up there with what you're carrying.";
            return kitchen;
        ],
        s_to gallery,
  has   dry_land;

Object  -> paint_door "paint-covered door"
  with  name 'door' 'paint' 'paint-covered' 'covered',
        found_in gallery studio,
        door_to [;
            if( location == studio )
                return gallery;
            return studio;
        ],
        door_dir [;
            if( location == studio )
                return s_to;
            return n_to;
        ],
  has   door open scenery openable;

Object  -> paint "paint"
  with  name 'paint',
        before [;
            Take, Attack, Poke, Destroy, Remove:
                "Some paint chips away, revealing more paint.";
        ],
  has   scenery;

Object  -> zork_owners_manual "ZORK owner's manual"
  with  description "^Congratulations!^^You are the privileged owner of ZORK:
          The Great Underground Empire, a self-contained and
          self-maintaining universe. If used and maintained in
          accordance with normal operating practices for small
          universes, ZORK will provide many months of trouble-free
          operation.^",
        initial "Loosely attached to a wall is a small piece of paper.",
        name 'manual' 'piece' 'paper' 'zork' 'owners' 'small',
        size 1,
  has   readable flammable;

[ BatMovesPlayer ;
   FweepFunc(4);
   new_line;
   print "The bat grabs you by the scruff of your neck and lifts you
          away....^";
   PlayerTo(PickOne(coalmine_rooms));
   rtrue;
];

[ FweepFunc cnt i;
  for( i=0 : i < cnt : i++ )
    print "    Fweep!^";
];

[ OneWay;
  print "You won't be able to get back up to the tunnel you are going
         through when it gets to the next room.^";
  switch( location ) {
    maze4: return maze2;
    maze7: return maze19;
    maze15: return maze13;
    maze12: return maze5;
  }
];

Class   Maze
  class Room
  with  description "This is part of a maze of twisty little passages, all
          alike."
  has   maze_room dry_land;

Class   DeadEnd
  class Room
  with  description "You have come to a dead end in the maze.",
  has   maze_room dry_land;

Maze    maze1 "Maze"
  with  s_to maze4, w_to maze2, e_to the_troll_room, n_to maze1;

Maze    maze2 "Maze"
  with  w_to maze3, e_to maze19, n_to maze1;

Maze    maze3 "Maze"
  with  u_to maze5, w_to maze4, n_to maze2;

Maze    maze4 "Maze"
  with  d_to OneWay, s_to maze1, e_to maze3;

Maze    maze5 "Maze"
  with  sw_to maze6, e_to maze18, n_to maze3;

Object  -> skeleton "skeleton"
  with  before [;
            Touch, Take, Lower, Raise, Push, Kiss, Kick, Attack:
                print "A ghost appears in the room and is appalled at your
                    desecration of the remains of a fellow adventurer. He casts
                    a curse on your valuables and banishes them to the Land of
                    the Living Dead. The ghost leaves, muttering obscenities.^";
                Rob(location, land_of_the_dead, 100);
                Rob(player, land_of_the_dead);
                rtrue;
        ],
        initial "A skeleton, probably the remains of a luckless adventurer,
          lies here.",
        name 'bones' 'skeleton' 'body' 'remains',
  has   static;

Object  -> skeleton_key "skeleton key"
  with  size 10,
        name 'skeleton' 'key',
        list_together KEY_GROUP,
  has   toolbit;

Object  -> rusty_knife "rusty knife"
  with  initial "Beside the skeleton is a rusty knife.",
        size 20,
        after [;
            Take: 
                if( sword notin player )
                    rfalse;
                "As you touch the rusty knife, your sword gives a single pulse
                 of blinding blue light.";
        ],
        name 'knives' 'knife' 'rusty' 'cursed',
        list_together WEAP_GROUP,
  has   weapon;

Object  -> bag_of_coins "leather bag of coins"
  with  initial "An old leather bag, bulging with coins, is here.",
        description "There are lots of coins in there.",
        trophy_value 5,
        list_together TREASURE_GROUP,
        value 10,
        size 15,
        before [;
            Open, Close:
                "The coins are safely inside; there's no need to do that.";
          LookIn: return self.description();
          Empty, Receive: "Don't be silly. It wouldn't be ", (a) self,
             " anymore.";
        ],
        name 'bag' 'coins' 'treasure' 'old' 'leather' 'of',
;

Object  -> burned_out_lantern "burned-out lantern" 
  with  initial "The deceased adventurer's useless lantern is here.",
        size 20,
        before [;
            SwitchOn: "The lamp is long burnt-out.";
            SwitchOff: "There's no need for that.";
        ],
        name 'lantern' 'lamp' 'rusty' 'burned' 'dead' 'useless',
;

Maze    maze6 "Maze"
  with  d_to maze5, u_to maze15, w_to maze6, e_to maze7;

Maze    maze7 "Maze" 
  with  d_to OneWay, u_to maze9, s_to maze8, w_to maze6, e_to maze17;

Maze    maze8 "Maze"
  with  se_to cyclops_room, s_to maze7, w_to maze9;

Maze    maze9 "Maze" 
  with  nw_to maze9, ne_to maze7, s_to maze7, w_to maze8;

Maze    maze10 "Maze"
  with  d_to maze12, s_to maze14, w_to maze13, e_to maze15;

DeadEnd maze11 "Dead End"
  with  s_to maze12;

Maze    maze12 "Maze"
  with  d_to OneWay, 
        u_to maze15, sw_to maze13, e_to maze10, n_to maze11;

Maze    maze13 "Maze"
  with  d_to maze14, sw_to maze12, nw_to maze10, ne_to grating_room;

Maze    maze14 "Maze"
  with  u_to maze13, w_to maze10, e_to maze15;

Maze    maze15 "Maze"
  with  d_to OneWay,
        nw_to maze15, s_to maze10, w_to maze12, e_to maze14, n_to maze6;

DeadEnd maze16 "Dead End"
  with  n_to maze17;

Maze    maze17 "Maze" 
  with  se_to maze16, ne_to maze7, w_to maze17;

DeadEnd maze18 "Dead End"
  with  w_to maze5;

DeadEnd maze19 "Dead End"
  with  s_to maze2;

Room    grating_room "Grating Room"
  with  contains grating,
        description "You are in a small room near the maze. There are twisty
              passages in the immediate vicinity.",
        u_to grating,
        sw_to maze13,
  has   dry_land;

Object  -> grating "grating"
  with  initial [;
            if( location == grating_room ) {
                if( self has open )
                    "Above you is an open grating with sunlight pouring in.";
                if( self has locked )
                    "Above you is a grating locked with a skull-and-crossbones 
                     lock.";
                "Above you is a grating.";
            }
            if( grating has open )
                "There is an open grating, descending into darkness.";
            "There is a grating securely fastened into the ground.";
        ],
        before [;
            Unlock:
                if( location == clearing1 )
                    "You can't reach the lock from here.";
                rfalse;
            Lock:
                if( location == clearing1 )
                    "You can't lock it from this side.";
                rfalse;
            Pick: "You can't pick the lock.";
            Receive:
                if( noun.size > 20 )
                    "It won't fit through the grating.";
                if( location == clearing1 ) {
                    move noun to grating_room;
                    print_ret (The) noun, "goes through the grating into the 
                        darkness below.";
                }
                ! Bug fix here
                move noun to clearing1;
                print_ret "You slide ", (the) noun, " through the grating
                    and onto the ground above the grating.";
        ],
        after [;
            Open:
                give grating general ~concealed;
                if( location == grating_room && pile_of_leaves in clearing1 &&
                    pile_of_leaves hasnt moved ) {
                    move pile_of_leaves to grating_room;
                    give pile_of_leaves visited;
                    print "A pile of leaves falls onto your head and to the 
                        ground.^";
                }
                give grating_room light;
                if( location == grating_room )
                    "The grating opens to reveal trees above you.";
                "The grating opens, leading into darkness below.";
            Close:
                give grating_room ~light;
                rfalse;
        ],
        with_key skeleton_key,
        door_dir [;
            if( location == clearing1 ) return d_to; return u_to;
        ],
        door_to [;
            if( location == clearing1 ) return grating_room; return clearing1;
        ],
        name 'grate' 'grating',
        found_in [;
            if( location == grating_room )
                rtrue;
            if( location == clearing1 )
                return (self has general);
            rfalse;
        ],
  has   static door locked lockable openable;
  
Array Cyclo_messages --> 
  "The cyclops seems somewhat agitated."
  "The cyclops appears to be getting more agitated."
  "The cyclops is moving about the room, looking for something."
  "The cyclops was looking for salt and pepper. No doubt they are condiments for his upcoming snack."
  "The cyclops is moving toward you in an unfriendly manner."
  "You have two choices: 1. Leave  2. Become dinner."
;

Room    cyclops_room "Cyclops Room"  
  with  contains stairs, 
        description [;
            print "This room has an exit on the northwest, and a staircase
                 leading up.";
            if( strange_passage has general )
                "The east wall, previously solid, now has a cyclops-sized
                 opening in it.";
        ],
        u_to [;
            if( Dead || cyclops has general )
                return treasure_room;
            "The cyclops doesn't look like he'll let you past.";
        ],
        nw_to maze8,
        e_to [; 
            if( strange_passage has general )
                return strange_passage;
            "The east wall is solid rock.";
        ],
        name 'opening',
  has   dry_land; 

Object  -> cyclops "cyclops" 
  with  strength 10000, 
        name 'hungry' 'giant' 'cyclops' 'monster' 'eye',
        number 0,
        initial [;
            if( self has general )
                "The cyclops is sleeping blissfully at the foot of the stairs.";
            if( self.number == 0 )
             "A cyclops, who looks prepared to eat horses (much less mere
              adventurers), blocks the staircase. From his state of health,
              and the bloodstains on the walls, you gather that he is not
              very friendly, though he likes people.";
            StartDaemon(self);
            if( self.number < 0 ) 
                "The cyclops is standing in the corner, eyeing you closely.
                 I don't think he likes you very much. He looks extremely
                 hungry, even for a cyclops."; 
            if( self.number > 0 )
                "The cyclops, having eaten the hot peppers, appears to be
                 gasping. His enflamed tongue protrudes from his man-sized
                 mouth.";
        ],
        life [ wrath o w;
          wrath = self.number;

          Give:
            if( self has general )
              "The cyclops is asleep and cannot accept ", (the) noun, ".";
            if( noun == lunch ) {
              self.number = Least(-1, -wrath);
              remove lunch;
              StartDaemon(self);
              "The cyclops says ~Mmm Mmm. I love hot peppers! But oh, could I
               use a drink. Perhaps I could drink the blood of that thing.~
               From the gleam in his eye, it could be surmised that you are
               ~that thing~.";
            }
            if( noun == glass_bottle ) {
              objectloop( o in noun ) {
                if( o ofclass Water_Quantity ) {
                  w = o;
                  break;
                }
              }
              if( w ) {
                if( wrath >= 0 )
                  "The cyclops apparently is not thirsty and refuses your
                   generous offer.";
                remove w;
                Water_Quantity.destroy(w);
                move glass_bottle to location;
                give glass_bottle open;
                give cyclops ~fightbit;
                give self general;
                StopDaemon(self);
                "The cyclops takes the bottle, checks that it's open, and
                 drinks the water. A moment later, he lets out a yawn that
                 nearly blows you over, and then falls fast asleep (what did
                 you put in that drink, anyway?).";
              }
            }
            if( noun == clove_of_garlic )
              "The cyclops may be hungry, but there is a limit.";
            "The cyclops is not so stupid as to eat THAT!";

          Ask, Answer, Tell, Order:
            if( self has general )
              "No use talking to him. He's fast asleep.";
            else
              "The cyclops prefers eating to making conversation.";
          WakeOther:
             if( self hasnt general )
               rfalse;
             print "The cyclops yawns and stares at the thing that woke
                    him up.^";
             give cyclops fightbit ~general;
             if( wrath < 0 )
               self.number = -wrath;
             rtrue;
        ],
        description [;
          if( self has general )
            "The cyclops is sleeping like a baby, albeit a very ugly one.";
          else
            "A hungry cyclops is standing at the foot of the stairs.";
        ],
        before [;
          Poke:
            if( self has general )
              << Wake self >>;
            "~Do you think I'm as stupid as my father was?~, he says,
             dodging.";
           Take: "The cyclops doesn't take kindly to being grabbed.";
           Listen: "You can hear his stomach rumbling.";
           Tie, TieWith: "You cannot tie the cyclops, though he is fit to be
                          tied.";
        ],
        daemon [ w;
          if( self has general || Dead ) {
            StopDaemon(self);
            rfalse;
          }
          if( location ~= cyclops_room ) {
            StopDaemon(self);
            rfalse;
          }
          if( self.number < -5 || self.number > 5 ) {
            StopDaemon(self);
            return JigsUp("The cyclops, tired of all of your games and
                           trickery, grabs you firmly. As he licks his
                           chops, he says ~Mmm. Just like Mom used to make
                           'em.~ It's nice to be appreciated.");
          }
          if( self.number < 0 )
            w = -(--self.number);
          if( self.number > 0 )
            w = self.number++;
          print (string) Cyclo_messages-->(w - 1);
        ],
  has   static animate;

Room    treasure_room "Treasure Room"
  with  contains stairs,
        description "This is a large room, whose east wall is solid granite. A
          number of discarded bags, which crumble at your touch, are
          scattered about on the floor. There is an exit down a
          staircase.",
        value 25,
        name 'discarded' 'bags',
        initial [;
           if( thief has general || Dead )
             rfalse;
           if( thief notin location ) {
             print "You hear a scream of anguish as you violate the robber's
                    hideaway. Using passages unknown to you, he rushes to its
                    defense.^";
             move thief to location;
           }
           give thief fightbit ~concealed;
           return ThiefInTreasure();
        ],
        d_to cyclops_room,
  has   dry_land;

Object  -> chalice "chalice"
  with  capacity 5,
        description "There is a silver chalice, intricately engraved, here.",
        trophy_value 5,
        value 10,
        size 10,
        before [;
            Take:
                if( thief hasnt general && thief in treasure_room ||
                    thief.strength > 0 && thief has fightbit )
                    "You'd be stabbed in the back first.";
                rfalse;
        ],
        name 'chalice' 'cup' 'silver' 'treasure' 'engraved',
        list_together TREASURE_GROUP,
  has   container open;

[ Near_water r;
  switch( location ) {
    dam_base:       r = river4; break;
    beach2:         r = river2; break;
    beach1:         r = frigid_river; break;
    shore:      r = river1; break;
    sandy_beach:    r = frigid_river; break;
    reservoir_south:    r = reservoir; break;
    reservoir_north:    r = reservoir; break;
    stream_view:    r = stream; break;
  }
  if( ~~r )
    rfalse;
  if( r )
    return r;
  return -1;
];

[ River_speeds;
  switch( location ) {
    river4: return 4;
    river3: return 4;
    river2: return 3;
    frigid_river: return 2;
    river1: return 1;
  }
  return 0;
];

[ RiverDaemon room ;
  if( ~~(location == river4 or river3 or river2 or river1 or frigid_river) ) {
    QueueInterrupt(RiverDaemon)-->0 = 0;
    rtrue;
  }
  room = River_next();
  if( room ) {
    print "The flow of the river carries you downstream.^";
    Queue(RiverDaemon, River_speeds())-->0 = 1;
    << Go d_obj >>;
  }
  return JigsUp("Unfortunately, the magic boat doesn't provide protection
                 from the rocks and boulders one meets at the bottom of
                 waterfalls. Including this one.");
];

[ River_next;
  if( location == thedark ) {
    if( Probability(20) ) {
      if( Grue_Repellent )
        print "There are sinister gurgling noises in the darkness all around
               you!^";
      else {
        print "Oh, no! A lurking grue slithered into the ";
        if( parent(player) has enterable )
          print (object) parent(player);
        else
          print "room";
        JigsUp(" and devoured you!");
        rtrue;
      }
    }
  }
  switch( real_location ) {
    river4: return river3;
    river3: return river2;
    river2: return frigid_river;
    frigid_river: return river1;
  }
  rfalse;
];

Object  magic_boat "magic boat" 
  with  vtype 4,
        capacity 100,
        size 20,
        name 'inflatable' 'magic' 'plastic' 'seaworthy' 'raft' 'boat',
        react_after [;
            Drop:
                if( noun && noun has weapon && player in self )
                    << Cut self noun >>;
        ],
        after [;
            Receive: 
                if( noun has weapon )
                    << Cut self noun >>;
                rfalse;
        ],
        before [ body_of_water;
            Launch:
                if( location == river4 or river3 or river2 or frigid_river or
                    reservoir or stream ) { 
                    print "You are on the ";
                    switch( location ) {
                        reservoir: print "reservoir"; break;
                        stream: print "stream"; break;
                        default: print "river";
                    }
                    ", or have you forgotten?";
                }
                body_of_water = Near_water();
                if( body_of_water > 0 ) {
                    move self to body_of_water;
                    PlayerTo(self, 2);
                    Queue(RiverDaemon, River_speeds())-->0 = true;
                    rtrue;
                }
                if( body_of_water == -1 )
                    rtrue;
                "You can't launch it here.";
            Poke, Attack, Destroy, Cut:
                if( ~~second || second hasnt weapon )
                    rfalse;
                move punctured_boat to location;
                Rob(magic_boat, location);
                remove self;
                print "It seems that ", (the) second, " didn't agree with the
                   boat, as evidenced by the loud hissing noise issuing
                   therefrom. With a pathetic sputter, the boat deflates,
                   leaving you without.^";
                if( player notin self ) rtrue;
                move player to location;
                if( location hasnt water_room )
                    rtrue;
                if( location == reservoir or stream )
                    return JigsUp("Another pathetic sputter, this time from 
                        you, heralds your drowning.");
                JigsUp("In other words, fighting the fierce currents of the
                    Frigid River. You manage to hold your own for a bit, but
                    then you are carried over a waterfall and into some nasty
                    rocks. Ouch!");
                rtrue;
            Launch:
                if( player notin self )
                    "You're not in the boat!";
                rfalse;
            Fill:
                if( ~~second || second == blast_of_air )
                    << Inflate self >>;
                 rfalse;
            Inflate: "Inflating it further would probably burst it.";
            Deflate:
                if( player in self )
                    "You can't deflate the boat while you're in it.";
                if( magic_boat notin location )
                    "The boat must be on the ground to be deflated.";
                remove self;
                move pile_of_plastic to location;
                SetPronoun('it', pile_of_plastic);
                "The boat deflates.";
            Enter:
                if( sceptre in player || nasty_knife in player || 
                    sword in player || rusty_knife in player || 
                    bloody_axe in player || stiletto in player ) {
                    remove self;
                    print "Oops! Something sharp seems to have slipped and 
                        punctured the boat. The boat deflates to the sounds 
                        of hissing, sputtering, and cursing.^";
                        move punctured_boat to location;
                    rtrue;
                }
            Go:
                if( noun == land_obj or e_obj or w_obj or d_obj )
                    rtrue;
                if( location == reservoir && (noun == n_obj or s_obj) )
                    rtrue;
                if( location == stream && noun == s_obj )
                    rtrue;
                print "Read the label for the boat's instructions.^";
                return 2;
        ],
  has   open container flammable enterable;

Object  -> tan_label "tan label"
  with  text_string "     !!!!  FROBOZZ MAGIC BOAT COMPANY  !!!!^^Hello,
          Sailor!^^Instructions for use:^^   To get into a body of
          water, say ~Launch~.^   To get to shore, say ~Land~ or the
          direction in which you want to maneuver the
          boat.^^Warranty:^^  This boat is guaranteed against all
          defects for a period of 76 milliseconds from date of
          purchase or until first used, whichever comes
          first.^^Warning:^   This boat is made of thin plastic.^
          Good Luck!^",
        size 2,
        name 'label' 'fineprint' 'print' 'tan' 'fine',
  has   readable flammable;

Object  punctured_boat "punctured boat"
  with  size 20,
        name 'plastic' 'punctured' 'large' 'boat' 'pile',
        before [;
            Receive:
                if( noun == viscous_material )
                    return RepairBoat();
                rfalse;
            Fix:
                if( second == viscous_material )
                    return RepairBoat();
                if( second )
                    "With ", (a) second, "?";
                rfalse;
          Fill, Inflate: "No chance. Some moron punctured it.";
        ],
  has   flammable;

[ RepairBoat ; 
   print "Well done. The boat is repaired.^";
   move pile_of_plastic to parent(punctured_boat);
   remove self;
   rtrue;
];

[ next_in_list list previous i; 
  for( i = 1 : i <= list-->0: i++ ) {
    if( list-->i == previous ) {
      if( i == (list-->0) - 1 )
        return list-->1;
      else
        return list-->(i + 1);
    }
  }
  return list-->1;
];

[ Thief_vs_Adventurer here robbed robbed_player found_anything ;
    if ((~~Dead) && location == treasure_room) rfalse;
    if (~~Thief_here) {
        if ((~~Dead) && (~~here) && 30 > random(100)) {
            if (stiletto in thief) {
                give thief ~concealed;
                Thief_here = true;
                "Someone carrying a large bag is casually leaning 
                    against one of the walls here. He does not speak,
                    but it is clear from his aspect that the bag will
                    be taken only over his dead body.";
            }
            if( stiletto notin player ) rfalse;
            move stiletto to thief;
            give stiletto scenery;
            give thief ~concealed;
            print "You feel a light finger-touch, and turning, notice a 
                grinning figure holding a large bag in one hand and a stiletto 
                in the other.";
            Thief_here = true;
            rtrue;
        }
        if (here && thief has fightbit && (~~TimeToRetreat(thief))) {
            print "Your opponent, determining discretion to be the better part 
                of valor, decides to terminate this little
                contretemps. With a rueful nod of his head, he steps
                backward into the gloom and disappears.^";
            give thief concealed;
            give thief ~fightbit;
            RetreiveStiletto(); ! not popped
            rtrue;
        }
        if (here && thief has fightbit && 90 > random(100)) rfalse;
        if (here && 30 > random(100)) {
            print "The holder of the large bag just left, looking disgusted. 
                Fortunately, he took nothing.^";
            give thief concealed;
            RetreiveStiletto(); ! not popped
            rtrue;
        }
        if( 70 > random(100) || Dead ) rfalse;
        if( Rob(location,thief,100) ) {
            robbed = true;
        } else if( Rob(player,thief) ) {
            robbed = true;
            robbed_player = true;
        }
        Thief_here = true;
        if (robbed && (~~here)) {
            print "A seedy-looking individual with a large bag just wandered 
                through the room. On the way through, he quietly
                abstracted some valuables from the room and from your
                possession, mumbling something about ~Doing unto others
                before...~^";
            RobYouBlind();
            rfalse;
        }
        if (here) {
            RetreiveStiletto(); ! not popped
            if (robbed) {
                print "The thief just left, still carrying his large bag. 
                    You may not have noticed that he ";
                if (robbed_player) {
                    print "robbed you blind first.";
                } else {
                    print "appropriated the valuables in the room.";
                }
                new_line;
                RobYouBlind();  ! not popped
            } else {
                print "The thief, finding nothing of value, left disgusted.^";
            }
            give thief concealed;
            here = 0;
            rtrue;
        }
        "A ~lean and hungry~ gentleman just wandered through, carrying a 
            large bag. Finding nothing of value, he left disgruntled.";
    }
    if ((~~here) || 30 <= random(100)) rfalse;
    found_anything = Rob(location,thief,100);
    if( found_anything )
        robbed = found_anything;
    else
        robbed = Rob(player, thief);
    if (robbed) {
        print "The thief just left, still carrying his large bag. You may not 
            have noticed that he robbed you blind first.^";
        RobYouBlind();  ! not popped
    } else {
        print "The thief, finding nothing of value, left disgusted.^";
    }
    give thief concealed;
    here = 0;
    RetreiveStiletto(); ! not popped
    rfalse;
];

[ ThiefDaemon room here once robbed;
  room = parent(thief);
  while( true ) {
    if( thief has concealed )
      here = 0;
    else
      here = 1; 
    if( here )
      room = parent(thief);

    if( room ~= treasure_room || room == location ) {  
      if( room ~= location || room hasnt light || troll in location ) {
        if( thief in room && thief hasnt concealed ) {
          give thief concealed;
          here = 0;
        }
        if( room has visited )  {
          Rob(room, thief, 75);
          if( room has maze_room && location has maze_room )
            RobMaze(room);
          robbed = StealJunk(room);
        }
      } else {
        if( Thief_vs_Adventurer(here)  ) 
          rtrue;
        if( thief has concealed )
          here = 0; 
      }
    } else {
      if( here ) { 
        HackTreasures();
        here = 0;
      } else 
        ThiefDies(treasure_room);
    }
    once = 1 - once;
    if( ~~once || here )
      break;
    RetreiveStiletto();

    if( location == treasure_room )
      continue;
    do {
      room = next_in_list(Room_list, room);
    } until( room && room hasnt sacred && room has dry_land );
    !print "DEBUG: ThiefDaemon moving to ", (object) room, "^";
    move thief to room;
    give thief ~fightbit concealed;
    Thief_here = false;
  }
  if( room ~= treasure_room )
    DropJunk(room);
  return robbed;
];

[ DropJunk room item nextitem dropflag;
  item = child(thief);
  while( item ) {
    nextitem = sibling(item);
    if( item ~= stiletto && item ~= large_bag ) {
      if( item.trophy_value == 0 && Probability(30) ) {
        give item ~concealed;
        move item to room;
        if( dropflag == 0 && room == location )
          print "The robber, rummaging through his bag, dropped a few items
                 he found valueless.";
        dropflag = 1;
      }
    }
    item = nextitem;
  }
  return dropflag;
];

[ RetreiveStiletto;
  if( stiletto notin parent(thief) ) rfalse;
  give stiletto scenery;
  move stiletto to thief;
  rtrue;
];

[ StealJunk room item nextitem;
  item = child(room);
  while( item ) {
    nextitem = sibling(item);
    if( item.trophy_value && item hasnt static && item hasnt scenery && item hasnt sacred &&
        item hasnt concealed ) {
      if( item == stiletto && probability(10) ) {
        move item to thief;
        give item visited concealed;
        if( item == rope )
          Dome_flag = false;
        if( room ~= location )
          rfalse;
        print_ret "You suddenly notice that ", (the) item, " vanished.";
      }
    }
    item = nextitem;
  }
];

Object  thief "thief"
  with  strength 5,
        initial "There is a suspicious-looking individual, holding a large
          bag, leaning against one wall. He is armed with a deadly
          stiletto.",
        daemon ThiefDaemon,
        life [ obj sib;
          Tell, Answer, Ask: "The thief is a strong, silent type.";
          Hello:
            if( thief.initial == THIEF_OUT_DESC )
              rfalse;
            "The thief, being temporarily incapacitated, is unable to
             acknowledge your greeting with his usual graciousness.";
          Throw:
             if( noun == nasty_knife && thief hasnt fightbit ) {
               if( probability(10) == 0 ) {
                 give thief fightbit;
             "You missed. The thief makes no attempt to take the
              knife, though it would be a fine addition to the
              collection in his bag. He does seem angered by your
              attempt.";
               }
               print "You evidently frightened the robber, though you didn't
                      hit him. He flees";
               if( child(thief) ) {
                 EmptyThiefBag(thief, location);
                 print ", but the contents of his bag fall on the floor";
               }
               give thief concealed;
           ".";
            }
          Give: 
            if( thief.strength < 0 ) {
              thief.strength = -thief.strength;
              StartDaemon(thief);
              RetreiveStiletto();
              thief.initial = THIEF_DESC;
              print "Your proposed victim suddenly recovers consciousness.^";
            }
            move noun to large_bag;
            if( noun.trophy_value > 0 ) {
              Thief_engrossed = true;
              "The thief is taken aback by your unexpected generosity, but
               accepts ", (the) noun, " and stops to admire its beauty.";
            }
            "The thief places ", (the) noun, " in his bag and thanks you
             politely.";
          Death:
            give thief general;
            obj = child(self);
            while( obj ) {
              sib = sibling(obj);
              move obj to location;
              give obj ~scenery;
              if( obj == jeweled_egg || jeweled_egg in obj ) {
                give jeweled_egg open ~locked;
              }
              obj = sib;
            }
            rtrue;
        ],
        before [;
          Take: "Once you got him, what would you do with him?";
          Listen: "The thief says nothing, as you have not been formally
                   introduced.";
          LookIn: << Examine self >>;
        ],
        description "The thief is a slippery character with beady eyes that
          flit back and forth. He carries, along with an unmistakable
          arrogance, a large bag over his shoulder and a vicious stiletto,
          whose blade is aimed menacingly in your direction. I'd watch
          out if I were you.",
        each_turn [ itm flag;
          if( thief has general ) {
            if( stiletto in self ) {
              move stiletto to location;
              give stiletto ~scenery;
            }
            itm = ThiefDies(location);
            if( location == treasure_room ) {
              if( chalice in location )
                print "The chalice is now safe to take.^";
              itm = child(location);
              while( itm ) {
                if( ~~(itm == chalice or thief or player) ) {
                  give itm ~concealed;
                  if( flag == 0 ) {
                    flag = 1; 
                    print "As the thief dies, the power of his magic
                           decreases, and his treasures reappear:^";
                    WriteListFrom(itm, FULLINV_BIT+NEWLINE_BIT+RECURSE_BIT);
                  }
                }
                itm = sibling(itm);
              }
            } else if( itm ) {
              print "His booty remains.^";
            }
            StopDaemon(self);
            rtrue;
          }
          if( ~~Thief_here || thief has concealed || random(100) > 20 )
            rfalse;
          if( thief.initial == THIEF_OUT_DESC ) {
            if( location == parent(thief) ) {
              give thief fightbit;
              print "The robber revives, briefly feigning continued
                     unconsciousness, and, when he sees his moment, scrambles
                     away from you.^";
            }
            StartDaemon(self);
            thief.initial = THIEF_DESC;
            return RetreiveStiletto();
          }
          if( thief.strength < 0 ) {
            give thief ~fightbit;
            move stiletto to location;
            give stiletto ~scenery;
            thief.initial = THIEF_OUT_DESC;
          }
          if( stiletto notin thief && stiletto in parent(thief) ) {
            move stiletto to thief;
            give stiletto scenery;
            if( thief in location ) {
              "The robber, somewhat surprised at this turn of events, nimbly
               retrieves his stiletto.";
            }
          }
          give thief fightbit;
        ],
        name 'thief' 'robber' 'man' 'person' 'shady' 'suspicious' 'seedy',
  has   concealed open container animate transparent;

Object  -> large_bag "large bag"
  with  name 'large' 'thiefs' 'bag',
        before [;
          if( self notin thief )
            rfalse;
          Take:
            if( thief.initial == THIEF_OUT_DESC )
              print_ret "Sadly for you, the robber collapsed on top of the
                         bag. Trying to take it would wake him.";
            print_ret "The bag will be taken over his dead body.";
          Insert:
            print_ret "It would be a good trick.";
          Close, Open:
            print_ret "Getting close enough would be a good trick.";
          LookIn, Examine:
            print_ret "The bag is underneath the thief, so one can't say
                       what, if anything, is inside.";
        ],
  has   container openable flammable;

Object  -> stiletto "stiletto"
  with  size 10,
        before [;
          Take:
            if( self in thief )
              return TryTakeWeapon(stiletto, thief);
        ],
        name 'vicious' 'stiletto',
  has   weapon;

[ TryTakeWeapon itm villain;
   if( villain notin location ) rfalse;
   if( itm notin villain )
     print_ret (The) villain, " swings it out of your reach.";
   print_ret (The) itm, " seems white-hot. You can't hold on to it.";
];

[ RobYouBlind old_lit;
  if( ~~old_lit )
    rtrue;
  if( ~~OffersLight(location) )
    print_ret "The thief seems to have left you in the dark.";
];

[ HackTreasures item;
  RetreiveStiletto();
  give thief concealed;
  item = child(treasure_room);
  while( item ) {
    give item ~concealed;
    item = sibling(item);
  }
  rtrue;
];
[ ThiefDies room item nextitem dropped;
  item = child(thief);

  while( item ) {
    nextitem = sibling(item);
    if( item ~= stiletto && item ~= large_bag ) {
      if( item.trophy_value ) {
        move item to room;
        dropped = 1;
        if( item == jeweled_egg ) {
          give jeweled_egg open;
        }
      }
    }
    item = nextitem;
  }
  return dropped;
];

[ RobMaze room item nextitem;
  item = child(room); 
  while( item ) {
    nextitem = sibling(item);

    if( (item hasnt scenery or static or concealed) && random(100) < 40 ) {
      print "You hear, off in the distance, someone saying ~My, I wonder what
        this fine ", (object) item, " is doing here.~^";
      if( Probability(60) == 0 ) 
        rtrue;
      if( large_bag in thief )
        move item to large_bag;
      else
        move item to thief;
      give item visited; 
      rtrue;
    }
    item = nextitem;
  }
];

[ Least x y;
  if( x <= y )
     return x;
  return y;
];

[ QueryWeight top obj total;
  obj = child(top);
  while( obj ) {
    if( top == player && obj has clothing )
      total++;
    else {
      total = total + QueryWeight(obj);
    }
    obj = sibling(obj);
  }
  return total + top.size;
];

[ NewRoom i obj;
  if( location provides contains ) {
    !print " contains (", location.#contains / 2, " objects)^  contains ";
    !for( i=0 : i < location.#contains : i = i++ )
    !  print location.&contains->i, " ";
    !new_line;
    for( i=0 : i < location.#contains / 2 : i++ ) {
      obj = location.&contains-->i;

      if( obj has absent )
    continue;

      !print "Debug: contains moving ", (object) obj, " to ", (object) location, "^";
      move obj to location;

    }
  }
];

[ Rob what dest prob nextitem item robbed;
  item = child(what);
  while( item ) {
    nextitem = sibling(item);
    if( item.trophy_value > 0 && (item hasnt concealed or sacred) ) {
      if( prob == 0 || random(100) <= prob ) {
         move item to dest;
         give item moved;
         if( dest == thief )
           move item to large_Bag;
         robbed = 1;
      }
    }
    item = nextitem;
  }
  return robbed;
];

[ EmptyThiefBag thief room item nextitem;
  item = child(thief);
  while( item ) {
    nextitem = sibling(item);
    give item ~concealed;
    move item to room;
    item = nextitem;
  }
];

[ ThiefInTreasure itm;
  itm = child(location);
  if( itm && sibling(itm)  )
    print "The thief gestures mysteriously, and the treasures in the room
           suddenly vanish.^";
  while( itm ) {
    if( itm ~= chalice && itm ~= thief )
      give itm concealed;
    itm = sibling(itm);
  }
];
  

Room    the_troll_room "The Troll Room"
  with  description "This is a small room with passages to the east and south
          and a forbidding hole leading west. Bloodstains and deep
          scratches (perhaps made by an axe) mar the walls.",
        name 'hole' 'bloodstains' 'scratches' 'blood' 'stains',
        s_to cellar,
        w_to [;
          if( troll in self && troll.strength >= 0 && Dead == 0 )
            "The troll fends you off with a menacing gesture.";
          else
            return maze1;
        ],
        e_to [;
          if( troll in self && troll.strength >= 0 && Dead == 0 )
            "The troll fends you off with a menacing gesture.";
          else
            return e_w_passage;
        ],
  has   dry_land;


[ TrollGift itm msg;
    print (string) msg, (the) itm;
    if( 20 > random(100) && noun has weapon ) {
        remove itm;
        remove troll;
        " and eats it hungrily. Poor troll, he dies from an internal
         hemorrhage and his carcass disappears in a sinister black fog.";
    }
    if( noun has weapon ) {
        move itm to location;
        give troll general;
        " and, being for the moment sated, throws it back. Fortunately, the
         troll has poor control, and ", (the) noun, " falls to the floor. He 
         does not look pleased.";
    }
    remove itm;
    " and not having the most discriminating tastes, gleefully eats it.";
];

Object  -> troll "troll"
  with  strength 2,
        description [;
            if( self.strength < 0 )
                "An unconscious troll is sprawled on the floor. All passages 
                 out of the room are open.";
            if( bloody_axe notin self )
                "A pathetically babbling troll is here.";
            "A nasty-looking troll, brandishing a bloody axe, blocks
                all passages out of the room.";
        ],
        initial [; PrintOrRun(self, description); rtrue; ],
        life [;
            Tell, Ask, Answer:
                "The troll isn't much of a conversationalist.";
            Give:
                if( noun == bloody_axe ) {
                    move bloody_axe to troll;
                    "The troll scratches his head in confusion, 
                     then takes the axe.";
                }
                TrollGift(noun, "The troll, who is not overly proud, 
                    graciously accepts ");
                rtrue;
            Throw:
                if( noun == bloody_axe ) {
                    move bloody_axe to troll;
                    "The troll scratches his head in confusion, then takes 
                     the axe.";
                }
                TrollGift(noun, "The troll, who is remarkably coordinated,
                    catches ");
                rtrue;
            Order:  "Unfortunately, the troll can't hear you.";
            WakeOther:
                if( troll in location && troll has rmungbit ) {
                    return self.wake();
                }
                "He's wide awake, or haven't you noticed...";
        ],
        order [;
            default: "Unfortunately, the troll can't hear you.";
        ],
        before [;
            Take, Push:
                "The troll spits in your face, grunting ~Better luck next time~
                in a rather barbarous accent.";
            Listen:
                "Every so often the troll says something, probably
                 uncomplimentary, in his guttural tongue.";
            Poke, Strike: "The troll laughs at your puny gesture.";
        ],
        wake [;
            give troll fightbit ~rmungbit;
            if( bloody_axe in location )
                move bloody_axe to self;
            if( self in location )
                "The troll stirs, quickly resuming a fighting stance.";
        ],
        each_turn [ flag;
            if( location ~= the_troll_room ) {
                self.strength = -self.strength;
                rtrue;
            }
            if( self.strength < 0 ) {
                if( bloody_axe in self )
                    move bloody_axe to the_troll_room;
                give self rmungbit;
                if( 33 <= random(100) ) {
                    RunLife(self, ##Wake);
                }
                rtrue;
            }
            if( troll notin the_troll_room ) rfalse;
            if( bloody_axe in troll )
                rfalse;

            if( bloody_axe in location && Probability(75) ~= 0 ) {
                move bloody_axe to troll;
                "The troll, angered and humiliated, recovers his
                 weapon. He appears to have an axe to grind with you.";
            }
            if( flag == 0 )
                "^The troll, disarmed, cowers in terror, pleading for his
                 life in the guttural tongue of the trolls.";
            rtrue;
        ],
        fight [ lv;
            ! print "DEBUG: troll.fight(", lv, ")^";
            switch( lv ) {
            F_DISARMED:
                if (bloody_axe in troll) rfalse;
                if (bloody_axe in location && Probability(75)) {
                    give bloody_axe scenery;
                    move bloody_axe to troll;
                    troll.description = "A nasty-looking troll, brandishing a 
                        bloody axe, blocks all passages out of the room.";
                    if (troll notin location) rtrue;
                        "The troll, angered and humiliated, recovers his 
                         weapon. He appears to have an axe to grind with you.";
                }
                if (troll notin location) rfalse;
                troll.description = "A pathetically babbling troll is here.";
                "The troll, disarmed, cowers in terror, pleading for 
                    his life in the guttural tongue of the trolls.";
            F_DEAD:  ! 2
                if( bloody_axe in self ) {
                    give bloody_axe ~scenery weapon;
                    move bloody_axe to location;
                }
                rtrue;
            F_OUTCOLD: ! 3
                if( bloody_axe in self ) {
                    give bloody_axe ~scenery weapon;
                    move bloody_axe to location;
                }
                give self ~fightbit;
                self.description = "An unconscious troll is sprawled on the 
                    floor. All passages out of the room are open.";
                rtrue;
            F_WAKE:  ! 4
                if (troll in location) {
                    give troll fightbit;
                    "The troll stirs, quickly resuming a fighting stance.";
                }
                if (bloody_axe in troll) {
                    troll.description = "A nasty-looking troll, brandishing a 
                        bloody axe, blocks all passages out of the room.";
                } else if (bloody_axe in the_troll_room) {
                    give bloody_axe scenery;
                    move bloody_axe to troll;
                    troll.description = "A nasty-looking troll, brandishing a 
                        bloody axe, blocks all passages out of the room.";
                } else {
                    troll.description = "A troll is here.";
                }
            }
        ],
        name 'troll' 'nasty',
  has   transparent static animate;

Object  -> -> bloody_axe "bloody axe"
  with  size 25,
        before [;
            Take: if( self in troll ) "The troll swings it out of your reach.";
        ],
        name 'axe' 'ax' 'bloody',
        list_together WEAP_GROUP,
  has   weapon;

Room    e_w_passage "East-West Passage"
  with  contains stairs,
        description "This is a narrow east-west passageway. There is a narrow
          stairway leading down at the north end of the room.",
        value 5,
        d_to chasm,
        w_to the_troll_room,
        e_to round_room,
        n_to chasm,
  has   dry_land;

Room    round_room "Round Room"
  with  description "This is a circular stone room with passages in all
          directions. Several of them have unfortunately been
          blocked by cave-ins.",
        name 'cave-ins' 'passages',
        se_to engravings_cave,
        s_to narrow_passage,
        w_to e_w_passage,
        e_to loud_room,
        n_to n_s_passage,
  has   dry_land;

Array text_array -> 63;
Array parse_array -> 32; 

Room    loud_room "Loud Room"   
  with  contains stairs,
        description [;
            print "This is a large room with a ceiling which cannot be
               detected from the ground. There is a narrow passage
               from east to west and a stone stairway leading upward.";
            if( self has general || (fcd_3 hasnt open && Low_tide) )
                " The room is eerie in its quietness.";
            if( fcd_3 has open || Low_tide )
                " The room is deafeningly loud with an undetermined rushing
                 sound. The sound seems to reverberate from all of the walls,
                 making it difficult even to think.";
            rtrue;
        ],
        name 'ceiling' 'passage' 'narrow',
        initial [;
            if( fcd_3 has open && ~~Low_tide ) {
                print "It is unbearably loud here, with an ear-splitting roar
                   seeming to come from all around you. There is a pounding in
                   your head which won't stop. With a tremendous effort, you
                   scramble out of the room.^";
                switch( random(3) ) {
                    1: PlayerTo(deep_canyon);
                    2: PlayerTo(round_room);
                    3: PlayerTo(damp_cave);
                }
                rtrue;
            }
        ],
        each_turn [ v i lastword len pos;
            if( self has general )
                rtrue;
            while( true ) { 
                new_line;
                print ">";
                text_array->0 = 63;
                parse_array->0 = 32;
                read text_array parse_array;
                if( parse_array->1 == 0 ) {
                    print "I beg your pardon?^";
                    continue;
                }
                v = parse_array-->1;
                if( v == 'go' or 'walk' or 'run' )
                    v = parse_array-->3;
                switch( v ) {
                    'e', 'east': << Go e_obj >>;
                    'w', 'west': << Go w_obj >>;
                    'u', 'up': << Go u_obj >>;
                    'save': < Save >; continue;
                    'restore': < Restore >; continue;
                    'q', 'quit': < Quit >; continue;
                    'bug': print "That's only your opinion.^"; continue;
                    'echo':
                        give self general;
                        give platinum_bar ~sacred ~static;
                        "The acoustics of the room change subtly.^";
                }
                lastword = parse_array->1;
                len = parse_array->(4 * lastword);
                pos = parse_array->(4 * lastword + 1);

                for( i=0: i<len: i++ )
                    print (char) text_array->(pos + i);
                print " ";
                for( i=0: i<len: i++ )
                    print (char) text_array->(pos + i);
                print " ...^";
            }
        ],
        u_to deep_canyon,
        w_to round_room,
        e_to damp_cave,
  has   dry_land;

Object  -> platinum_bar "platinum bar"
  with  description "On the ground is a large platinum bar.",
        trophy_value 5,
        list_together TREASURE_GROUP,
        value 10,
        size 20,
        name 'bar' 'platinum' 'treasure' 'large',
  has   sacred static;

Room    engravings_cave "Engravings Cave"
  with  description "You have entered a low cave with passages leading
          northwest and east.",
        nw_to round_room,
        e_to dome_room,
  has   dry_land;

Object  -> wall_with_engravings "wall with engravings"
  with  description "The engravings were incised in the living rock of the
          cave wall by an unknown hand. They depict, in symbolic
          form, the beliefs of the ancient Zorkers. Skillfully
          interwoven with the bas reliefs are excerpts illustrating
          the major religious tenets of that time. Unfortunately, a
          later age seems to have considered them blasphemous and
          just as skillfully excised them.",
        initial "There are old engravings on the walls here.",
        name 'old' 'ancient' 'wall' 'engravings' 'inscription' 'zorkers' 'with',
  has   readable static;


Room    dome_room "Dome Room"
  with  description [;
            print "You are at the periphery of a large dome, which
                forms the ceiling of another room below. Protecting you
                from a precipitous drop is a wooden railing which circles
                the dome.^";
            if( Dome_flag == 0 ) rtrue;
            "Hanging down from the railing is a rope which ends about ten
             feet from the floor below.";
        ],
        name 'ceiling',
        initial [;
            if( Dead ) {
                print "As you enter the dome you feel a strong pull as if from a
                    wind drawing you over the railing and down.^";
                PlayerTo(torch_room, 1);
            }
        ],
        before [;
            Jump, Dive:
                return JigsUp("I'm afraid that the leap you attempted has
                    done you in.");
        ],
        d_to [;
            if( Dome_flag ~= 0 )
                return torch_room;
            "You cannot go down without fracturing many bones.";
        ],
        w_to engravings_cave,
  has   dry_land;

Object  -> wooden_railing "wooden railing"
  with  name 'wooden' 'railing' 'rail',
  has   scenery;

Object  -> dome "dome"
  with  name 'dome',
        before [; Kiss: "No."; ],
        found_in dome_room torch_room,
  has   scenery;

Room    land_of_the_dead "Land of the Dead"
  with  contains pile_of_bodies,
        description "You have entered the Land of the Living Dead. Thousands
          of lost souls can be heard weeping and moaning. In the
          corner are stacked the remains of dozens of previous
          adventurers less fortunate than yourself. A passage exits
          to the north.",
        out_to entrance_to_hades,
        n_to entrance_to_hades,
  has   dry_land light;

Object  -> crystal_skull "crystal skull"
  with  trophy_value 10,
        value 10,
        initial "Lying in one corner of the room is a beautifully carved
          crystal skull. It appears to be grinning at you rather
          nastily.",
        name 'skull' 'head' 'treasure' 'crystal',
        list_together TREASURE_GROUP,
;

Object  -> pile_of_bodies "pile of bodies"
  with  name 'mangled' 'bodies' 'body' 'remains' 'pile' 'of',
        before [;
            Take: "A force keeps you from taking the bodies.";
            Molest, Burn, Poke, Destroy:
                return JigsUp("The voice of the guardian of the dungeon
                    booms out from the darkness, ~Your disrespect costs you
                    your life!~ and places your head on a sharp pole.");
        ],
        found_in entrance_to_hades land_of_the_dead,
  has   scenery;

Room    entrance_to_hades "Entrance to Hades"   
  with  contains pile_of_bodies,
        number 0,
        description [;
            print "You are outside a large gateway, on which is inscribed^^
                Abandon every hope all ye who enter here!^^The gate is
                open; through it you can see a desolation, with a pile
                of mangled bodies in one corner. Thousands of voices,
                lamenting some hideous fate, can be heard.^";
            if( Dead || self has general )
                rtrue;
            "The way through the gate is barred by evil spirits, who jeer at 
             your attempts to pass.";
        ],
        before [;
            Banish:
                if( second ~= number_of_ghosts ) rfalse;
                if( (brass_bell in player or location) &&
                    (black_book in player or location) &&
                    (pair_of_candles in player or location) )
                    "You must perform the ceremony.";
                "You aren't equipped for an exorcism.";
            Ring:
                if( noun ~= brass_bell ) rfalse;
                give brass_bell general;
                remove brass_bell;
                move red_hot_bell to location;
                StartTimer(red_hot_bell, 20);
                self.number = 6;
                StartDaemon(self);
                print "The bell suddenly becomes red hot and falls to the
                       ground. The wraiths, as if paralyzed, stop their jeering
                       and slowly turn to face you. On their ashen faces, the
                       expression of a long-forgotten terror takes shape.^";
                
                if( pair_of_candles in player ) {
                    print "In your confusion, the candles drop to the ground";
                    if( pair_of_candles has light ) {
                        StopDaemon(pair_of_candles);
                        print " (and they are out)";
                    }
                    print ".^";
                    move pair_of_candles to location;
                    give pair_of_candles ~light ~flame;
                }
                rtrue;
            Read:
                if( noun ~= black_book ) rfalse;
                if( Exorcism_candle == 0 ) rfalse;
                remove number_of_ghosts;
                give entrance_to_hades general;
                Exorcism_candle = 0;
                give brass_bell ~general;
                StopDaemon(self);
                "Each word of the prayer reverberates through the hall in a
                 deafening confusion. As the last word fades, a voice, loud
                 and commanding, speaks: ~Begone, fiends!~ A heart-stopping
                 scream fills the cavern, and the spirits, sensing a greater
                 power, flee through the walls.";
        ],
        daemon [;
            self.number--;
            if( self.number == 0 ) {
                Exorcism_candle = 0;
                give brass_bell ~general;
                StopDaemon(self);
                if( player in self )
                    "The tension of this ceremony is broken, and the wraiths,
                     amused but shaken at your clumsy attempt, resume their 
                     hideous jeering.";
                rtrue;
            }
            if( Exorcism_candle == 0 && pair_of_candles in player &&
              pair_of_candles has light ) {
                Exorcism_candle = true;
                self.number = 3;
                "The flames flicker wildly and appear to dance. The earth
                 beneath your feet trembles, and your legs nearly buckle
                 beneath you. The spirits cower at your unearthly power.";
            }
        ],
        in_to [;
            if( self has general )
                return land_of_the_dead;
            "Some invisible force prevents you from passing through the gate.";
        ],
        u_to cave1,
        s_to [;
            if( self has general )
                return land_of_the_dead;
            "Some invisible force prevents you from passing through the gate.";
        ],
  has   dry_land light;

Object  -> gates "gates"
  with  name 'gate' 'gates' 'gateway',
        before [;
            Enter:  << Go s_obj >>;
            Close, Open, Touch:
                "The gate is protected by an invisible force. It makes your
                 teeth ache to touch it.";
        ],
        found_in entrance_to_hades land_of_the_dead,
 has   scenery door open concealed;

Object  -> number_of_ghosts "number of ghosts"
  with  name 'ghosts' 'spirit' 'fiends' 'force' 'invisible' 'evil'
          'of' 'number',
        before [;
            Attack, Poke: "How can you attack a spirit with material objects?";
            Banish: "Only the ceremony itself has any effect.";
            default: "You seem unable to interact with these spirits.";
        ],
        life [;
            Tell, Order, Ask, Answer:
                "The spirits jeer loudly and ignore you.";
        ],
  has   scenery animate;

Object  red_hot_bell "red hot brass bell"
  with  description "On the ground is a red hot bell.",
        name 'brass' 'hot' 'red' 'small' 'bell',
        time_left 0,
        before [;
            Take: "The bell is very hot and cannot be taken.";
            Touch:
                if( second ) {
                    if( second has flammable ) {
                        remove second;
                        print_ret (The) second, " burns and is consumed.";
                    }
                    if( second ~= pair_of_hands )
                        "The heat from the bell is too intense.";
                }
                "The bell is too hot to touch.";
            Ring: "The bell is too hot to touch.";
        ],
        after [;
            PouredOn:
                remove self;
                move brass_bell to location;
                StopTimer(self);
                "The water cools the bell and is evaporated.";
        ],
        time_out [;
            remove self;
            move brass_bell to entrance_to_hades;
            if( location == entrance_to_hades )
                "The bell appears to have cooled down.";
        ],     
  has   static;

Room    chasm "Chasm"
  with  contains crack stairs,
        description "A chasm runs southwest to northeast and the path follows
          it. You are on the south side of the chasm, where a crack
          opens into a passage.",
        d_to "Are you out of your mind?",
        u_to e_w_passage,
        sw_to e_w_passage,
        ne_to reservoir_south,
        s_to n_s_passage,
  has   dry_land;

Object  -> crack "crack"
  with  name 'narrow' 'crack',
        before [;
            Enter: "You can't fit through the crack.";
        ],
        found_in damp_cave chasm,
  has   scenery;

Room    n_s_passage "North-South Passage"
  with  description "This is a high north-south passage, which forks to the
          northeast.",
        ne_to deep_canyon,
        s_to round_room,
        n_to chasm,
  has   dry_land;

Room    damp_cave "Damp Cave"
  with  contains crack,
        description "This cave has exits to the west and east, and narrows to
          a crack toward the south. The earth is particularly damp
          here.",
        s_to "It is too narrow for most insects.",
        w_to loud_room,
        e_to beach2,
  has   dry_land;

Room    twisting_passage "Twisting Passage"
  with  description "This is a winding passage. It seems that there are only
          exits on the east and north.",
        e_to cave2,
        n_to mirror_room1,
        name 'passage',
  has   dry_land;

Room    winding_passage "Winding Passage"
  with  description "This is a winding passage. It seems that there are only
          exits on the east and north.",
        e_to cave1,
        n_to mirror_room2,
        name 'passage',
  has   dry_land;

Room    narrow_passage "Narrow Passage"
  with  description "This is a long and narrow corridor where a long
          north-south passageway briefly narrows even further.",
        s_to mirror_room2,
        n_to round_room,
        name 'passageway',
  has   dry_land;

Room    cold_passage "Cold Passage"
  with  description "This is a cold and damp corridor where a long east-west
          passageway turns into a southward path.",
        s_to mirror_room1,
        w_to slide_room,
        name 'path',
  has   dry_land;

Room    atlantis_room "Atlantis Room"
  with  contains stairs,
        description "This is an ancient room, long under water. There is an
          exit to the south and a staircase leading up.",
        u_to cave2,
        s_to reservoir_north,
  has   dry_land;

Object  -> crystal_trident "crystal trident"
  with  trophy_value 11,
        value 4,
        initial "On the shore lies Poseidon's own crystal trident.",
        size 20,
        name 'trident' 'fork' 'treasure' 'poseidon' 'own' 'crystal',
        list_together TREASURE_GROUP,
;

Room    cave2 "Cave"
  with  contains stairs,
        description "This is a tiny cave with entrances west and north, and a
          staircase leading down.",
        d_to atlantis_room,
        s_to atlantis_room,
        w_to twisting_passage,
        n_to mirror_room1,
        name 'cave',
  has   dry_land;

Room    mirror_room2 "Mirror Room"
  with  description [;
            print "You are in a large square room with tall ceilings. On
                the south wall is an enormous mirror which fills the entire
                wall. There are exits on the other three sides of the room.^";
            if( mirror2 has general )
                "Unfortunately, the mirror has been destroyed by your
                 recklessness.";
            rtrue;
        ],
        w_to winding_passage,
        e_to cave1,
        n_to narrow_passage,
        name 'ceiling' 'ceilings',
  has   dry_land light;

[ MirrorAction opposite_room item_here item_there nextitem ;
    LookIn: return self.description();
    Take: "The mirror is many times your size. Give up.";
    Touch:
        if( second && second ~= pair_of_hands )
            "You feel a faint tingling transmitted through ", (the) second, ".";
        if( location == mirror_room1 )
            opposite_room = mirror_room2;
        else
            opposite_room = mirror_room1;

        item_here = child(location);
        item_there = child(opposite_room);
        while( item_here ) {
            nextitem = sibling(item_here);
            move item_here to opposite_room;
            item_here = nextitem;
        }
        while( item_there ) {
            nextitem = sibling(item_there);
            move item_there to location;
            item_there = nextitem;
        }
        PlayerTo(opposite_room, 0);
        "There is a rumble from deep within the earth and the room shakes.";
    Attack, ThrowAt, Poke, Destroy:
        if( mirror1 has general )
            "Haven't you done enough damage already?";
        give mirror1 general;
        give mirror2 general;
        Goodluck_flag = false;
        "You have broken the mirror. I hope you have a seven years' supply of
         good luck handy.";
];

Object  -> mirror2 "mirror"
  with  description [;
            if( self has general )
                "The mirror is broken into many pieces.";
            "There is an ugly person staring back at you.";
        ],
        before MirrorAction,
        name 'reflection' 'mirror' 'enormous',
  has   scenery;

Room    mirror_room1 "Mirror Room"
  with  description [;
            print "You are in a large square room with tall ceilings. On
                the south wall is an enormous mirror which fills the entire
                wall. There are exits on the other three sides of the room.^";
            if( mirror1 has general )
                "Unfortunately, the mirror has been destroyed by your
                 recklessness.";
            rtrue;
        ],
        e_to cave2,
        n_to cold_passage,
  has   dry_land;

Object  -> mirror1 "mirror"
  with  description [;
            if( self has general )
                "The mirror is broken into many pieces.";
            "There is an ugly person staring back at you.";
        ],
        before MirrorAction,
        name 'reflection' 'mirror' 'enormous',
  has   scenery;

Room    stream "Stream"
  with  description "You are on the gently flowing stream. The upstream route
          is too narrow to navigate, and the downstream route is
          invisible due to twisting walls. There is a narrow beach
          to land on.",
        land_to stream_view,
        d_to reservoir,
        u_to "The channel is too narrow.",
        w_to "The channel is too narrow.",
        e_to reservoir,
  has   water_room;

Object  -> stream_ob "stream"
  with  name 'stream' 'small' 'flowing',
        before [;
            Enter, Swim: "You can't swim in the stream.";
            Cross: "The other side is a sheer rock cliff.";
        ],
        found_in stream_view stream reservoir,
  has   scenery;

Room    stream_view "Stream View"
  with  description "You are standing on a path beside a gently flowing
          stream. The path follows the stream, which flows from west
          to east.",
        w_to "The stream emerges from a spot too small for you to
          enter.",
        e_to reservoir_south,
        name 'path',
  has   dry_land;

Room    egyptian_room "Egyptian Room"
  with  contains stairs,
        description "This is a room which looks like an Egyptian tomb. There
          is an ascending staircase to the west.",
        u_to temple,
        w_to temple,
        name 'tomb',
  has   dry_land;

Object  -> gold_coffin "gold coffin"
  with  capacity 35,
        description "The solid-gold coffin used for the burial of Ramses II is
          here.",
        trophy_value 15,
        value 10,
        size 55,
        name 'coffin' 'casket' 'treasure' 'solid' 'gold',
        list_together TREASURE_GROUP,
  has   sacred container openable;

Object  -> -> sceptre "sceptre"
  with  name 'sceptre' 'scepter' 'treasure' 'sharp' 'egyptian' 'ancient'
             'enamel',
        description "An ornamented sceptre, tapering to a sharp point, is
          here.",
        list_together TREASURE_GROUP,
        trophy_value 6,
        value 4,
        initial "A sceptre, possibly that of ancient Egypt itself, is in
          the coffin. The sceptre is ornamented with colored enamel,
          and tapers to a sharp point.",
        size 3,
        before [ obj nextobj;
            Raise, Brandish:
                if( location ~= aragain_falls or end_of_rainbow or 
                    on_the_rainbow )
                    "A dazzling display of color briefly emanates from the 
                     sceptre.";
                if( rainbow hasnt general ) {
                    give rainbow general;
                    print "Suddenly, the rainbow appears to become solid and,
                        I venture, walkable (I think the giveaway was the
                        stairs and bannister).^";
                    if( pot_of_gold has concealed ) {
                        give pot_of_gold ~concealed;
                        move pot_of_gold to end_of_rainbow;
                        if( location == end_of_rainbow )
                            print "A shimmering pot of gold appears at the 
                                end of the rainbow.^";
                    }
                } else {
                    give rainbow ~general;
                    obj = child(on_the_rainbow);
                    while( obj ) {
                        nextobj = sibling(obj);
                        remove obj;
                        obj = nextobj;
                    }
                    if( location ~= on_the_rainbow )
                        print "The rainbow seems to have become somewhat
                            run-of-the-mill.^";
                    else
                        JigsUp("The structural integrity of the rainbow is 
                            severely compromised, leaving you hanging
                            in mid-air, supported only by water vapor. Bye.");
                }
                rtrue;
        ],
  has   weapon;

Room    temple "Temple"
  with  contains stairs,
        description "This is the north end of a large temple. On the east wall
          is an ancient inscription, probably a prayer in a
          long-forgotten language. Below the prayer is a staircase
          leading down. The west wall is solid granite. The exit to
          the north end of the room is through huge marble pillars.",
        out_to torch_room,
        d_to egyptian_room,
        u_to torch_room,
        s_to altar,
        e_to egyptian_room,
        n_to torch_room,
        name 'marble' 'huge' 'pillars' 'pillar',
  has   dry_land sacred light;

Object  -> brass_bell "brass bell"
  with  name 'small' 'brass' 'bell',
        before [;
            Ring:
                if( entrance_to_hades hasnt general ) rfalse;
                print_ret "Ding, dong.";
        ];

Object  -> prayer "prayer"
  with  description "The prayer is inscribed in an ancient script, rarely used
          today. It seems to be a philippic against small insects,
          absent-mindedness, and the picking up and dropping of
          small objects. The final verse consigns trespassers to the
          land of the dead. All evidence indicates that the beliefs
          of the ancient Zorkers were obscure.",
        name 'ancient' 'old' 'prayer' 'inscription',
  has   sacred scenery readable;

Room    torch_room "Torch Room"
  with  contains stairs,
        description [;
            print "This is a large room with a prominent doorway leading
                to a down staircase. Above you is a large dome. Up around
                the edge of the dome (20 feet up) is a wooden railing. In
                the center of the room sits a white marble pedestal.";
            if( Dome_flag )
                " A piece of rope descends from the railing above, ending some
                 five feet above your head.";
            rtrue;
        ],
        d_to temple,
        u_to "You cannot reach the rope.",
        before [;
            Jump: "You cannot jump high enough to reach the rope.";
        ],
        s_to temple,
        name 'doorway',
  has   dry_land;

Object  -> pedestal "pedestal"
  with  capacity 30,
        before [;
            LookIn, Close, Open: "You can't do that.";
        ],
        description [;
            "It looks pretty much like ", (a) self, ".";
        ],
        name 'white' 'marble' 'pedestal',
  has   supporter scenery open;

Object  -> -> torch "ivory torch"
  with  trophy_value 6,
        value 14,
        initial "Sitting on the pedestal is a flaming torch, made of
          ivory.",
        size 20,
        description "The torch is burning.",
        before [;
            SwitchOn: "It is already burning.";
            SwitchOff:
                if( self hasnt flame ) rfalse;
                    "You nearly burn your hand trying to extinguish the flame.";
        ],
        react_before [;
            Pour:
                if( noun ofclass Water_Quantity && second == self ) {
                    remove noun;
                    Water_Quantity.destroy(noun);
                    "The water evaporates before it gets close.";
                }
                rfalse;
        ],
        name 'flaming' 'torch' 'ivory' 'treasure',
        list_together TREASURE_GROUP,
  has   light flame;

Room    altar "Altar"
  with  description "This is the south end of a large temple. In front of you
          is what appears to be an altar. In one corner is a small
          hole in the floor which leads into darkness. You probably
          could not get back up it.",
        d_to [;
            if( gold_coffin notin player )
                return cave1;
            "You haven't a prayer of getting the coffin down there.";
        ],
        n_to temple,
  has   dry_land sacred light;

Object  -> altar_hole "hole"
  with  name 'small' 'hole',
        before [;
            Enter: << Go d_obj >>;
! Receive to drop things down? Don't forget to block coffin
        ],
  has   scenery;

Object  -> altar_scenery "altar"
  with  capacity 50,
        name 'altar',
  has   supporter scenery;

Object  -> -> black_book "black book"
  with  text_string "Commandment #12592^^Oh ye who go about saying unto each:
          ~Hello sailor~:^Dost thou know the magnitude of thy sin
          before the gods?^Yea, verily, thou shalt be ground between
          two stones.^Shall the angry gods cast thy body into the
          whirlpool?^Surely, thy eye shall be put out with a sharp
          stick!^Even unto the ends of the earth shalt thou wander
          and^Unto the land of the dead shalt thou be sent at
          last.^Surely thou shalt repent of thy cunning.",
        initial "On the altar is a large black book, open to page 569.",
        size 10,
        before [;
            LookIn: return self.text_string();
            Open: "The book is already open to page 569.";
            Close: "As hard as you try, the book cannot be closed.";
            Turn, ReadPage:
                if( second == 569 )
                    return self.description();
                "Beside page 569, there is only one other
                 page with any legible printing on it. Most of it is
                 unreadable, but the subject seems to be the banishment
                 of evil. Apparently, certain noises, lights, and prayers
                 are efficacious in this regard.";
        ],
        after [;
            Burn:
                remove self;
                    return JigsUp("A booming voice says ~Wrong, cretin!~ and you
                           notice that you have turned into a pile of dust.
                           How, I can't imagine.");
        ],
        name 'book' 'prayer' 'page' 'books' 'large' 'black',
  has   readable flammable;

Object  -> -> pair_of_candles "pair of candles"
  with  initial "On the two ends of the altar are burning candles.",
        number 80,
        daemon [ fuel_left;
            give self visited;
            if( self hasnt flame ) {
                give self ~light;
                StopDaemon(self);
                rtrue;
            }
            fuel_left = --(self.number);
            if( self in player || self in location ) {
                if( fuel_left == 45 )
                    "The candles grow shorter.";
                if( fuel_left == 25 )
                    "The candles are becoming quite short.";
                if( fuel_left == 5 )
                    "The candles won't last long now.";
                if( fuel_left == 0 )
                    print "You'd better have more light than from ",
                         (the) self, ".^";
            }
            if( fuel_left <= 0 ) {
                StopDaemon(self);
                give self ~light ~flame rmungbit;
            }
        ],
        before [;
            if( self hasnt visited )
                StartDaemon(self);
            if( second == self )
                rfalse;
            Burn, SwitchOn:
                if( self has rmungbit )
                "Alas, there's not much left of the candles. Certainly not
                enough to burn.";
                if( ~~second ) {
                if( matchbook in player && matchbook has flame ) {
                    print "(with the match)^";
                    << SwitchOn self matchbook >>;
                }
                "You should say what to light them with.";
            }
            if( second == matchbook && matchbook has light ) {
                print "The candles are";
                if( self has light )
                    print "already";
                else {
                    give self light flame;
                    StartDaemon(self);
                }
                " lit.";
            }
            if( second == torch ) {
                if( self has light )
                    "You realize, just in time, that the candles are already
                     lighted.";
                remove self;
                StopDaemon(self);
                "The heat from the torch is so intense that the candles are
                 vaporized.";
            }
            "You have to light them with something that's burning, you know.";
            Count: "Let's see, how many objects in a pair? Don't tell me,
                  I'll get it.";
            SwitchOff:
                if( self hasnt light )
                    "The candles are not lighted.";
                give self ~light ~flame;
                "The flame is extinguished.";
            Insert:
                if( self has flame && second has flammable )
                    "That wouldn't be smart.";
                rfalse;
        ],
        description [;
            print "The candles are ";
            if( self has light )
                "burning.";
            else
                "out.";
        ],
        size 10,
        name 'candle' 'pair' 'burning' 'candles' 'of',
  has   light flame;

Room    slide_room "Slide Room"
  with  contains chute,
    description "This is a small chamber, which appears to have been part
          of a coal mine. On the south wall of the chamber the
          letters ~Granite Wall~ are etched in the rock. To the east
          is a long passage, and there is a steep metal slide
          twisting downward. To the north is a small opening.",
        d_to cellar,
        e_to cold_passage,
        n_to mine_entrance,
        name 'passage',
  has   dry_land;

Room    beach1 "White Cliffs Beach"
  with  contains white_cliffs river,
        description "You are on a rocky, narrow strip of beach beside the
          Cliffs. A narrow path leads north along the shore.",
        n_to [;
            if( magic_boat notin player )
                return beach2;
            "The path is too narrow.";
        ],
        name 'rocky' 'strip' 'beach',
  has   dry_land sacred;

Room    beach2 "White Cliffs Beach"
  with  contains white_cliffs river,
        description "You are on a narrow strip of beach which runs along the
          base of the White Cliffs. There is a narrow path heading
          south along the Cliffs and a tight passage leading west
          into the cliffs themselves.",
        s_to [;
            if( magic_boat notin player )
                return beach1;
            "The path is too narrow.";
        ],
        w_to [;
            if( magic_boat notin player )
                return damp_cave;
            "The path is too narrow.";
        ],
  has   dry_land sacred;

Object  -> white_cliffs "white cliffs"
  with  name 'white' 'cliff' 'cliffs',
        before [;
            Climb, Examine: "The cliffs are too steep for climbing.";
        ],
  has   scenery pluralname;

Room    deep_canyon "Deep Canyon"
  with  contains stairs,
        description [;
            print "You are on the south edge of a deep canyon. Passages lead
                 off to the east, northwest and southwest. A stairway leads
                 down.";
            if( fcd_3 has open && ~~Low_tide )
                print " You can hear a loud roaring sound, like that of rushing
                   water, from below.";
            if( fcd_3 hasnt open || ~~Low_tide )
                print " You can hear the sound of flowing water from below.";
            new_line;
            rtrue;
        ],
        d_to loud_room,
        sw_to n_s_passage,
        nw_to reservoir_south,
        e_to dam,
        name 'passages',
  has   dry_land;

Room    river1 "Frigid River"
  with  contains river,
        description "The sound of rushing water is nearly unbearable here. On
          the east shore is a large landing area.",
        land_to shore, 
        u_to "You cannot go upstream due to strong currents.",
        e_to shore,
        name 'shore' 'landing' 'area',
  has   water_room sacred light;
  
Room    frigid_river "Frigid River"
  with  contains river,
        description "The river is running faster here and the sound ahead
          appears to be that of rushing water. On the east shore is 
          a sandy beach. A small area of beach can also be seen    
          below the cliffs on the west shore.",
        land_to "You can land either to the east or the west.",
        d_to river1, 
        u_to "You cannot go upstream due to strong currents.",
        w_to beach1,
        e_to sandy_beach,
        name 'area' 'beach' 'shore',
  has   water_room sacred;
  
Object  -> red_buoy "red buoy"
  with  capacity 20,
        initial "There is a red buoy here (probably a warning).",
        size 10,
        after [;
            Take:
              if( self hasnt moved ) {
                  give self moved;
                  "You notice something funny about the feel of the buoy.";
              }
              rfalse;
        ],
        name 'buoy' 'red',
  has   container openable;
  
Object  -> -> large_emerald "large emerald"
  with  trophy_value 10,
        value 5,
        list_together TREASURE_GROUP,
        name 'emerald' 'treasure' 'large',
;   

Room    river2 "Frigid River"
  with  contains river,
        description "The river descends here into a valley. There is a narrow
          beach on the west shore below the cliffs. In the distance 
          a faint rumbling can be heard.",
        land_to beach2,
        d_to frigid_river,
        u_to "You cannot go upstream due to strong currents.",
        w_to beach2,
  has   water_room sacred;

Room    river3 "Frigid River"
  with  contains river,
    description "The river turns a corner here making it impossible to see
          the Dam. The White Cliffs loom on the east bank and large
          rocks prevent landing on the west.",
        land_to "There is no safe landing spot here.",
        d_to river2,
        u_to "You cannot go upstream due to strong currents.",
        w_to "Just in time you steer away from the rocks.",
        e_to "The White Cliffs prevent your landing here.",
        name 'corner',
  has   water_room sacred;

Room    river4 "Frigid River"   
  with  contains water river,
        description "You are on the Frigid River in the vicinity of the Dam.
          The river flows quietly here. There is a landing on the
          west shore.", 
        land_to dam_base, 
        d_to river3,
        u_to "You cannot go upstream due to strong currents.",
        w_to dam_base,
        e_to "The White Cliffs prevent your landing here.",
  has   water_room sacred light;

Room    sandy_cave "Sandy Cave"
  with  description "This is a sand-filled cave whose exit is to the
          southwest.",
        sw_to sandy_beach,
  has   dry_land;

Object  -> sand "sand"
  with  name 'sand' 'ground' 'dirt',
        number 0,
        before [;
            Dig:
                if( second ~= shovel )
                    rfalse;
                self.number++;
                switch( self.number ) {
                    1: "You seem to be digging a hole here.";
                    2: "The hole is getting deeper, but that's about it.";
                    3: "You are surrounded by a wall of sand on all sides.";
                    4: give scarab ~concealed;
                       move scarab to location;
                       "You can see a scarab here in the sand.";
                    5: if( scarab in location ) {
                            self.number = 0;
                            give scarab concealed;
                            remove scarab;
                       }
                       return JigsUp("The hole collapses, smothering you.");
                }
        ],
  has   scenery;

Object  scarab "beautiful jeweled scarab"
  with  trophy_value 5,
        value 5,
        size 8,
        name 'scarab' 'bug' 'beetle' 'treasure' 'beautiful' 'carved' 'jeweled',
        list_together TREASURE_GROUP,
  has   concealed;

Room    sandy_beach "Sandy Beach"
  with  contains water river,
        description "You are on a large sandy beach on the east shore of the
          river, which is flowing quickly by. A path runs beside the
          river to the south here, and a passage is partially buried
          in sand to the northeast.",
        ne_to sandy_cave,
        s_to shore,
        name 'shore' 'beach' 'sandy' 'path' 'passage',
  has   dry_land sacred;

Object  -> shovel "shovel"
  with  size 15,
        name 'shovel' 'tool' 'tools',
        list_together TOOL_GROUP,
  has   toolbit;

Room    shore "Shore"
  with  contains water river,
        description "You are on the east shore of the river. The water here
          seems somewhat treacherous. A path travels from north to
          south here, the south end quickly turning around a sharp
          corner.",
        s_to aragain_falls,
        n_to sandy_beach,
        name 'shore' 'path',
  has   dry_land sacred light;

Room    on_the_rainbow "On the Rainbow"
  with  description "You are on top of a rainbow (I bet you never thought you
          would walk on a rainbow), with a magnificent view of the
          Falls. The rainbow travels east-west here.",
        w_to end_of_rainbow,
        e_to aragain_falls,
  has   dry_land sacred light;

Room    aragain_falls "Aragain Falls"
  with  contains river,
        description [;
            print "You are at the top of Aragain Falls, an enormous waterfall
                 with a drop of about 450 feet. The only path here is on the
                 north end.^";
            if( rainbow has general )
                "A solid rainbow spans the falls.";
            "A beautiful rainbow can be seen over the falls and to the west.";
        ],
        d_to "It's a long way...",
        u_to [;
          if( rainbow has general ) return on_the_rainbow; else rfalse;
        ],
        w_to [;
          if( rainbow has general ) return on_the_rainbow; else rfalse;
        ],
        n_to shore,
        name 'path',
  has   dry_land sacred light;

Object  -> barrel "wooden barrel"
  with  name 'barrel' 'wooden',
        before [;
            Burn: "The barrel is damp and cannot be burned.";
            Push, Take: "You cannot move the barrel.";
        ],
        after [;
            Enter:
                "You are inside a barrel. Congratulations. Etched into the
                 side of the barrel is the word ~Geronimo!~. From your position,
                you cannot see the falls.";
        ],
  has   static vehicle container open enterable;

Array coalmine_rooms -->
  8
  mine4 mine3 mine2 mine1 ladder_top
  ladder_bottom squeaky_room mine_entrance;

Room    squeaky_room "Squeaky Room"
  with  description "You are in a small room. Strange squeaky sounds may be
          heard coming from the passage at the north end. You may
          also escape to the east.",
        e_to mine_entrance,
        n_to bat_room,
        name 'passage',
  has   dry_land;

Room    mine_entrance "Mine Entrance"
  with  description "You are standing at the entrance of what might have been
          a coal mine. The shaft enters the west wall, and there is
          another exit on the south end of the room.",
        in_to squeaky_room,
        s_to slide_room,
        w_to squeaky_room,
        name 'entrance' 'shaft',
  has   dry_land;

Room    mine1 "Coal Mine"
  with  description "This is a non-descript part of a coal mine.",
        d_to ladder_top,
        w_to mine1,
        n_to mine2,
  has   dry_land;

Room    mine2 "Coal Mine"
  with  description "This is a non-descript part of a coal mine.",
        sw_to mine1,
        s_to mine2,
        e_to mine3,
  has   dry_land;

Room    mine3 "Coal Mine"
  with  description "This is a non-descript part of a coal mine.",
        se_to mine2,
        s_to mine4,
        n_to mine3,
  has   dry_land;

Room    mine4 "Coal Mine"
  with  description "This is a non-descript part of a coal mine.",
        ne_to mine3,
        e_to mine4,
        n_to gas_room,
  has   dry_land;

Room    ladder_bottom "Ladder Bottom"
  with  contains wooden_ladder,
        description "This is a rather wide room. On one side is the bottom of
          a narrow wooden ladder. To the west and the south are
          passages leaving the room.",
        u_to ladder_top,
        s_to dead_end,
        w_to timber_room,
  has   dry_land;

Room    ladder_top "Ladder Top"
  with  contains wooden_ladder stairs,
        description "This is a very small room. In the corner is a rickety
          wooden ladder, leading downward. It might be safe to
          descend. There is also a staircase leading upward.",
        d_to ladder_bottom,
        u_to mine1,
  has   dry_land;

Object  -> wooden_ladder "wooden ladder"
  with  name 'wooden' 'ricketty' 'narrow' 'ladder',
        before [;
            Climb:
                if( location == ladder_top )
                    << Go d_obj >>;
                << Go u_obj >>;
            ClimbDown:
                if( location == ladder_top )
                    << Go d_obj >>;
                "You are already at the base of the ladder.";
            ClimbUp:
                if( location == ladder_bottom)
                    << Go u_obj >>;
                "You are already at the top of the ladder.";
        ],
        found_in ladder_top ladder_bottom,
  has   scenery;

[ EmptyHanded itm;
    itm = child(player);
    if( ~~itm )
        rtrue;
    while( itm ) {
        if( QueryWeight(itm) > 4 )
            rfalse;
        itm = sibling(itm);
    } 
    rtrue; 
];    
  
Room    timber_room "Timber Room"
  with  description "This is a long and narrow passage, which is cluttered
          with broken timbers. A wide passage comes from the east 
          and turns at the west end of the room into a very narrow
          passageway. From the west comes a strong draft.",
        w_to [;
            if( EmptyHanded() )
                return drafty_room;
            else
                "You cannot fit through this passage with that load.";
        ],  
        e_to ladder_bottom,
        name 'timbers' 'passageway',
  has   dry_land sacred;
  
Object  -> broken_timber "broken timber"
  with  size 50,
        name 'timber' 'pile' 'wooden' 'broken', 
;   
    
Room    dead_end "Dead End"
  with  description "You have come to a dead end in the mine.",
        n_to ladder_bottom,
  has   dry_land;
  
Object  -> pile_of_coal "small pile of coal"    
  with  size 20,
        name 'coal' 'pile' 'heap' 'small' 'of',
  has   flammable;

Object  huge_diamond "huge diamond"
  with  description "There is an enormous diamond (perfectly cut) here.",
        trophy_value 10,
        value 10,
        list_together TREASURE_GROUP,
        name 'diamond' 'treasure' 'huge' 'enormous',
;

Room    machine_room "Machine Room"
  with  description "This is a large, cold room whose sole exit is to the
          north.",
        n_to drafty_room,
  has   dry_land;

Object  -> machine "machine"
  with  capacity 50,
        initial [;
            print "In one corner there is a machine which is reminiscent
                of a clothes dryer. On its face is a switch which is labelled
                ~START~. The switch does not appear to be manipulable by any
                human hand (unless the fingers are about 1/16 by 1/4 inch). On
                the front of the machine is a large lid, which is ";
            if( machine has open )
                "open.";
            "closed.";
        ],
        before [;
            Take: "It is far too large to carry.";
        ],
        after [;
            Open:
                if( ~~child(self) )
                    "The lid opens.";
                print "The lid opens, revealing ";
                WriteListFrom(child(self),
                    FULLINV_BIT + ENGLISH_BIT + RECURSE_BIT);
                ".";
            SwitchOn:
                if( ~~second )
                    "It's not clear how to turn it on with your bare hands.";
                << Turn switch second >>;
        ],
        name 'machine' 'pdp1' 'dryer' 'lid',
  has   static container openable;

Object  -> switch "switch"
  with  before [ c itm nitm;
            Turn, SwitchOn:
                if( ~~second || second == pair_of_hands )
                    "You can't turn it with your hands...";
                if( second ~= screwdriver )
                    "It seems that ", (a) second, " won't do.";
                if( machine has open )
                    "The machine doesn't seem to want to do anything.";
                if( pile_of_coal in machine )
                    c = 1;
                itm = child(machine);
                while( itm ) {
                    nitm = sibling(itm);
                    remove itm;
                    itm = nitm;
                }
                if( c )
                    move huge_diamond to machine;
                else
                    move vitreous_slag to machine;

                "The machine comes to life (figuratively) with a dazzling 
                 display of colored lights and bizarre noises. After a
                 few moments, the excitement abates.";
        ],
        name 'switch',
  has   scenery;

Class CBasket
  with  name 'cage' 'dumbwaiter' 'basket',
        before [;
            Raise:
                if( basket1 in shaft_room )
                    return Dummy();
                move basket1 to shaft_room;
                move basket2 to drafty_room;
                SetPronoun('it', basket1);
                "The basket is raised to the top of the shaft.";
            Lower:
                if( basket1 notin shaft_room )
                    return Dummy();
                move basket1 to drafty_room;
                move basket2 to shaft_room;
                SetPronoun('it', basket2);
                "The basket is lowered to the bottom of the shaft.";
            Take: "The cage is securely fastened to the iron chain.";
            default:
                if( basket2 in location )
                    "The basket is at the other end of the chain.";
            rfalse;
        ],
        description "At the end of the chain is a basket.",
  has   scenery;

Room    drafty_room "Drafty Room"
  with  description "This is a small drafty room in which is the bottom of a
          long shaft. To the south is a passageway and to the east a
          very narrow passage. In the shaft can be seen a heavy iron
          chain.",
        name 'shaft',
        out_to [;
            if( EmptyHanded() )
                return timber_room;
            else
                "You cannot fit through this passage with that load.";
        ],
        s_to machine_room,
        e_to [;
            if( EmptyHanded() )
                return timber_room;
            "You cannot fit through this passage with that load.";
        ],
        value 13,
  has   dry_land sacred;

Object  -> chain "chain"
  with  name 'chain',
        before [;
            Take, Pull, Push: "The chain is secure.";
            Lower, Raise: "Perhaps you should do that to the basket.";
            ! Response to climb?
        ],
        description "The chain secures a basket within the shaft.",
        found_in drafty_room shaft_room,
  has   scenery;

CBasket -> basket2 "basket"
;

[ FindFlame top obj i;
    obj = child(top);
    while( obj ) {
        if( obj has flame )
            return obj;
        if( obj has supporter || (obj has container && obj has open) ) {
            i = FindFlame(obj);
            if( i )
                return i;
        }
        obj = sibling(obj);
    }
    rfalse;
];

Room    gas_room "Gas Room"
  with  contains stairs,
        description "This is a small room which smells strongly of coal gas.
          There is a short climb up some stairs and a narrow tunnel
          leading east.",
        initial [;
            if( FindFlame(player) ) {
                print "Oh dear. It appears that the smell coming from this 
                    room was coal gas. I would have thought twice about
                    carrying flaming objects in here.^";
                return JigsUp("^      ** BOOOOOOOOOOOM **");
            }
        ],
        u_to smelly_room,
        e_to mine4,
  has   dry_land sacred;

Object  -> gas "coal gas"
  with  name 'gas' 'odor',
        before [;
            Blow: "There is too much gas to blow away.";
            Smell: "It smells like coal gas in here.";
        ],
        each_turn [ o;
            if( location ~= gas_room ) rfalse;
                o = FindFlame(player);
            if( o ) {
                print "How sad for an aspiring adventurer to light ",
                    (a) o, " in a room which reeks of gas. Fortunately, there
                    is justice in the world.";
                return JigsUp("^      ** BOOOOOOOOOOOM **");
            }
            rfalse;
        ],
        found_in gas_room smelly_room,
  has   scenery;

Object  -> bracelet "sapphire-encrusted bracelet"
  with  trophy_value 5,
        value 5,
        size 10,
        name 'bracelet' 'jewel' 'sapphire' 'treasure',
        list_together TREASURE_GROUP,
;

Room    smelly_room "Smelly Room"
  with  contains stairs,
        description "This is a small non-descript room. However, from the
          direction of a small descending staircase a foul odor can
          be detected. To the south is a narrow tunnel.",
        d_to gas_room,
        s_to shaft_room,
  has   dry_land;
    
Room    shaft_room "Shaft Room" 
  with  description "This is a large room, in the middle of which is a small
          shaft descending through the floor into darkness below. To
          the west and the north are exits from this room.
          Constructed over the top of the shaft is a metal framework
          to which a heavy iron chain is attached.",
        d_to "You wouldn't fit and would die if you could.",
        w_to bat_room,
        n_to smelly_room,
        name 'framework', 
        ! Object for shaft
  has   dry_land;

CBasket -> basket1 "basket"
  with  capacity 50,
  has   open transparent container openable;
    
Room    bat_room "Bat Room"
  with  description "You are in a small room which has doors only to the east
          and south.",
        s_to squeaky_room,
        e_to shaft_room,
  has   dry_land sacred; 

Object  -> bat "bat"    
  with  initial [;
            if( parent(clove_of_garlic) == player or location )
                "In the corner of the room on the ceiling is a large vampire 
                 bat who is obviously deranged and holding his nose.";
            "A large vampire bat, hanging from the ceiling, swoops down at
             you!";
        ],
        each_turn [;
            if( parent(clove_of_garlic) == player or location ) rfalse;
                return BatMovesPlayer();
        ],  
        life [;
            Tell, Ask, Answer, Order:
                FweepFunc(6);
                rtrue;
            Attack: "You can't reach him; he's on the ceiling.";
        ],
        before [; 
            Take, Poke, Touch: "You can't reach him; he's on the ceiling.";
        ],
        name 'bat' 'vampire' 'deranged',
  has   animate static;

Object  -> jade_figurine "jade figurine"    
  with  description "There is an exquisite jade figurine here.",
        trophy_value 5,
        value 5,
        size 10, 
        name 'figurine' 'treasure' 'exquisite' 'jade',
        list_together TREASURE_GROUP,
;

Object  vitreous_slag "small piece of vitreous slag"
  with  size 10,
        before [;
            Take, Push, Touch:
                remove self;
                "The slag was rather insubstantial, and crumbles into dust at
                 your touch.";
        ],
        name 'gunk' 'piece' 'slag' 'small' 'vitreous' 'of',
;

[ DeathMessage;
  if( deadflag == DEATH_FINAL )
    print "You have died";
];

[ DarkRoutine;
  if( real_location == cellar ) {
    if( trap_door has open && trap_door hasnt visited ) {
      give trap_door ~open;
      give trap_door visited;
      print "The trap door crashes shut, and you hear someone
             barring it.^^";
    }
  }
  print "It is pitch black. ";
  if( ~~Grue_repellent ) "You are likely to be eaten by a grue.";
  new_line;
  rtrue;
];

[ Initialise o;  
  location = west_of_house;

  ChangePlayer(cretin);
  o = Water_Quantity.create();
  move o to glass_bottle;

  SetupMeleeTables();

  StartDaemon(thief);

  Queue(FightDaemon, -1)-->C_ENABLED = true;

  print "^^^";
  location = west_of_house;
  move thief to round_room;
  thedark.description = DarkRoutine;
];

Room    cave1 "Cave"
  with  contains stairs,
        description "This is a tiny cave with entrances west and north, and a
          dark, forbidding staircase leading down.",
        initial [;
            if( pair_of_candles notin player || Probability(50) )
                rfalse;
            if( pair_of_candles hasnt flame )
                rfalse;
            StopDaemon(pair_of_candles);
            give pair_of_candles ~flame ~light;
                "A gust of wind blows out your candles!";
        ],
        d_to entrance_to_hades,
        w_to winding_passage,
        n_to mirror_room2,
  has   dry_land;

Room    reservoir_north "Reservoir North"
  with  contains stairs,
        description [;
            if( Low_tide == 0 || fcd_3 hasnt open )  {
                if( fcd_3 has open ) {
                    print "You are in a large cavernous area. To the south is a
                        wide lake, whose water level appears to be falling
                        rapidly.";
                } else if( Low_tide == 0 && fcd_3 hasnt open ) {
                    print "You are in a large cavernous room, north of a large
                        lake.";
                } else {
                    print "You are in a cavernous area, to the south of which is
                        a very wide stream. The level of the stream is rising
                        rapidly, and it appears that before long it will be
                        impossible to cross to the other side.";
                }
            } else {
                print "You are in a large cavernous room, the south
                    of which was formerly a lake. However, with the water
                    level lowered, there is merely a wide stream running
                    through there.";
            }
            "^There is a slimy stairway leaving the room to the north.";
        ],
        s_to [;
            if( Low_tide ~= 0 )
                return reservoir;
            "You would drown.";
        ],
        n_to atlantis_room,
        u_to atlantis_room,
  has   dry_land;

Object  -> air_pump "hand-held air pump"
  with  name 'hand-held' 'air' 'pump' 'air-pump' 'small' 'tool' 'tools',
        list_together TOOL_GROUP,
  has   toolbit;

Object  -> lake "lake"
  with  name 'lake' 'reservoir',
        before [;
            if( Low_tide == 1 ) "There's not much lake left....";
            Cross: "It's too wide to cross.";
            Enter, Swim: "You would drown.";
        ],
        found_in reservoir reservoir_north reservoir_south,
  has   scenery;

Room    reservoir "Reservoir"
  with  each_turn [;
            if( fcd_3 has open ) rfalse;
            if( parent(player) hasnt enterable && Low_tide > 0 )
                "You notice that the water level here is rising rapidly. The
                 currents are also becoming stronger. Staying here seems
                 quite perilous!";
        ],
        description [;
            if( Low_tide == 0 )
                "You are on the lake. Beaches can be seen north and
                 south. Upstream a small stream enters the lake through a
                 narrow cleft in the rocks. The dam can be seen downstream.";
            "You are on what used to be a large lake, but which is now a
             large mud pile. There are ~shores~ to the north and south.";
        ],
        d_to "The dam blocks your way.",
        u_to stream,
        s_to reservoir_south,
        w_to stream,
        n_to reservoir_north,
  has   water_room;

Object  trunk_of_jewels "trunk of jewels"
  with  description "There is an old trunk here, bulging with assorted
          jewels.",
        initial "Lying half buried in the mud is an old trunk, bulging
          with jewels.",
        trophy_value 5,
        list_together TREASURE_GROUP,
        value 15,
        size 35,
        before [;
            Open, Close:
                "The jewels are safely inside; there's no need to do that.";
            LookIn: return self.description();
            Empty, Receive: "Don't be silly. It wouldn't be ", (a) self,
                " anymore.";
        ],
        name 'trunk' 'chest' 'jewels' 'treasure' 'old' 'of',
  has   concealed;

Room    reservoir_south "Reservoir South"
  with  description [;
            if( Low_tide == 0 || fcd_3 hasnt open )  {
                if( fcd_3 has open ) {
                    print "You are in a long room. To the north is a large lake,
                        too deep to cross. You notice, however, that the water
                        level appears to be dropping at a rapid rate. Before
                        long, it might be possible to cross to the other side
                        from here.";
                } else if( Low_tide == 0 && fcd_3 hasnt open ) {
                    print "You are in a long room on the south shore of a large
                        lake, far too deep and wide for crossing.";
                } else {
                    print "You are in a long room, to the north of which is a 
                        wide area which was formerly a reservoir, but now is 
                        merely a stream. You notice, however, that the level 
                        of the stream is rising quickly and that before long 
                        it will be impossible to cross here.";
                }
            } else {
                print "You are in a long room, to the north of which was
                   formerly a lake. However, with the water level lowered,
                   there is merely a wide stream running through the
                   center of the room.";
            }
            "^There is a path along the stream to the east or west, a
             steep pathway climbing southwest along the edge of a chasm,
             and a path leading into a canyon to the southeast.";
        ],
        sw_to chasm,
        se_to deep_canyon,
        w_to stream_view,
        e_to dam,
        n_to [;
            if( Low_tide ~= 0 )
                return reservoir;
            "You would drown.";
        ],
  has   dry_land;

Room    dam "Dam"
  with  description [;
            print "You are standing on the top of the Flood Control
                Dam #3, which was quite a tourist attraction in times far
                distant. There are paths to the north, south, and west,
                and a scramble down.^"; 
            if( Low_tide == 0 || fcd_3 hasnt open ) {
                if( fcd_3 has open )
                    print "The sluice gates are open, and water rushes through 
                        the dam. The water level behind the dam is still high.";
                else if( Low_tide == 1 )
                    print "The water level behind the dam is low: The sluice 
                        gates have been opened. Water rushes through the dam 
                        and downstream.";
                else
                    print "The sluice gates on the dam are closed. Behind the 
                        dam, there can be seen a wide reservoir. Water is 
                        pouring over the top of the now abandoned dam.";
            } else
                print "The sluice gates are closed. The water level in the
                   reservoir is quite low, but the level is rising quickly.";
            new_line;
            print "There is a control panel here, on which a large metal bolt 
                is mounted. Directly above the bolt is a small green plastic
                bubble";
            if( green_bubble has general )
                " which is glowing serenely.";
            ".";
        ],
        d_to dam_base,
        s_to deep_canyon,
        w_to reservoir_south,
        e_to dam_base,
        n_to dam_lobby,
  has   dry_land light;

Object  -> control_panel "control panel"
  with  name 'control' 'panel',
  has   scenery transparent;

Object  -> -> green_bubble "green bubble"
  with  before [;
            Take: "It is an integral part of the control panel.";
        ],
        description [;
            if( self has general )
                print_ret (The) self, " is glowing.";
        ],
        name 'bubble' 'small' 'green' 'plastic',
  has   scenery;

Object  -> -> bolt "bolt"
  with  name 'bolt' 'nut' 'metal' 'large',
        time_left 0,
        before [;
            Take: "It is an integral part of the control panel.";
            Turn:
                if( ~~second || second == pair_of_hands ) 
                    "You can't with your bare hands."; 
                if( second == viscous_material )
                    "Hmm. It appears the tube contained glue, not oil. Turning 
                     the bolt won't get any easier....";
                if( second ~= wrench )
                    "The bolt won't turn using ", (the) second, ".";
                if( green_bubble hasnt general )
                    "The bolt won't turn with your best effort.";
                if( fcd_3 has open ) {
                    give loud_room ~visited;
                    give fcd_3 ~open;
                    StartTimer(self, 8);
                    "The sluice gates close and water starts to collect behind 
                     the dam.";
                } else {
                    give fcd_3 open;
                    StartTimer(self, 8);
                    give reservoir_south ~visited;
                    "The sluice gates open and water pours through the dam.";
                }
        ],
        time_out [ obj nextobj;
            if( fcd_3 has open ) {
                give reservoir dry_land ~water_room;
                give deep_canyon ~visited;
                give loud_room ~visited;
                if( trunk_of_jewels has concealed ) {
                    give trunk_of_jewels ~concealed;
                    move trunk_of_jewels to reservoir;
                }
                obj = child(null_room);
                while( obj ) {
                    nextobj = sibling(obj);
                    move obj to reservoir;
                    obj = nextobj;
                }
                Low_tide = true;
                if( location == reservoir && parent(player) has enterable )
                    "The water level has dropped to the point at which the boat
                     can no longer stay afloat. It sinks into the mud.";
                if( location == deep_canyon )
                    "The roar of rushing water is quieter now.";
                if( location == reservoir_north or reservoir_south )
                    "The water level is now quite low here and you could easily
                     cross over to the other side.";
            } else {
                give reservoir water_room ~dry_land;
                give deep_canyon ~visited;
                give loud_room ~visited;
    
                obj = child(reservoir);
                while( obj ) {
                      nextobj = sibling(obj);
                      if( obj has flammable )
                          remove obj;
                      else
                          move obj to null_room;
                      obj = nextobj;
                }
                Low_tide = false;
                if( location == reservoir ) {
                    if( parent(player) has enterable )
                        "The boat lifts gently out of the mud and is now 
                         floating on the reservoir.";
                    else
                        JigsUp("You are lifted up by the rising river! You try 
                            to swim, but the currents are too strong. You
                            come closer, closer to the awesome structure
                            of Flood Control Dam #3. The dam beckons to
                            you. The roar of the water nearly deafens
                            you, but you remain conscious as you tumble
                            over the dam toward your certain doom among
                            the rocks at its base.");
                }
                if( location == deep_canyon )
                    "A sound, like that of flowing water, starts to come from
                      below.";
                if( location == loud_room ) {
                    print "All of a sudden, an alarmingly loud roaring sound 
                        fills the room. Filled with fear, you scramble away.^";
                    switch( random(3) ) {
                        1: PlayerTo(deep_canyon);
                        2: PlayerTo(round_room);
                        3: PlayerTo(damp_cave);
                    }
                    rtrue;
                }
                if( location == reservoir_north or reservoir_south )
                    "You notice that the water level has risen to the point 
                     that it is impossible to cross.";
            }
        ],
  has   scenery;

Object  -> fcd_3 "dam"
  with  before [;
            Close, Open: "Sounds reasonable, but this isn't how.";
            Fix:
                if( ~~second || second == pair_of_hands )
                    "Are you the little Dutch boy, then? Sorry, this is a big 
                     dam.";
                "With ", (a) second, "? Do you know how big this dam is?
                 You could only stop a tiny leak with that.";
        ],
        name 'dam' 'gate' 'gates' 'fcd#3' 'fcd',
  has   scenery;

Room    dam_base "Dam Base" 
  with  contains river,
        description "You are at the base of Flood Control Dam #3, which looms
          above you and to the north. The river Frigid is flowing by
          here. Along the river are the White Cliffs which seem to
          form giant walls stretching from north to south along the
          shores of the river as it winds its way downstream.",
        u_to dam,
        n_to dam,
        name 'base' 'cliffs' 'white' 'walls' 'downstream' 'shores',
  has   dry_land sacred light; 

Object  -> pile_of_plastic "pile of plastic"
  with  description "There is a folded pile of plastic here which has a small
          valve attached.", 
        size 20,
        before [;
            Fill, Inflate:
                if( self notin location ) 
                    "The boat must be on the ground to be inflated.";
                if( second == air_pump ) {
                    print "The boat inflates and appears seaworthy.^";
                    if( tan_label hasnt moved )
                        print "A tan label is lying inside the boat.^";
                    remove self;
                    move magic_boat to location;
                    rtrue;
                }
                if( ~~second || second == blast_of_air )
                    "You don't have enough lung power to inflate it.";
                "With ", (a) second, "? Surely you jest!";
        ],
        name 'boat' 'pile' 'plastic' 'valve' 'inflatable' 'of' 'folded',
  has   flammable;


Room    maintenance_room "Maintenance Room"
  with  description "This is what appears to have been the maintenance room
          for Flood Control Dam #3. Apparently, this room has been  
          ransacked recently, for most of the valuable equipment is 
          gone. On the wall in front of you is a group of buttons   
          colored blue, yellow, brown, and red. There are doorways  
          to the west and south.",
        s_to dam_lobby,
        w_to dam_lobby,
        name 'doorways',
  has   dry_land;

Object  -> tool_chests "group of tool chests"
  with  before [;
            Open: "The chests are already open.";
            Receive, Take, Push, Close: 
                remove self;
                    "The chests are so rusty and corroded that they crumble 
                     when you touch them.";
        ],
        initial "There is a group of tool chests here.",
        description "The chests are all empty.",
        name 'tool' 'chest' 'chests' 'group' 'toolchests' 'of',
  has   sacred open container static;

Object  -> wrench "wrench"  
  with  size 10,
        name 'wrench' 'tool' 'tools',
        list_together TOOL_GROUP,
  has   toolbit;

Object  -> tube "tube"
  with  description "---> Frobozz Magic Gunk Company <---
                     ^    All-Purpose Gunk",
        capacity 7,
        initial "There is an object which looks like a tube of toothpaste
          here.",
        size 5,
        before [;
            Receive: "The tube refuses to accept anything.";
            Squeeze:
                if( self hasnt open )
                    "The tube is closed.";
                if( viscous_material notin self )
                    "The tube is apparently empty.";
                move viscous_material to player;
                "The viscous material oozes into your hand.";
        ],
        name 'tube' 'tooth' 'paste',
  has   readable container openable;

Object  -> -> viscous_material "viscous material"
  with  size 6,
        name 'material' 'gunk' 'viscous' 'glue',
        list_together TOOL_GROUP,
  has   toolbit;

Object  -> screwdriver "screwdriver"
  with  name 'screwdriver' 'tool' 'tools' 'driver' 'screw',
        list_together TOOL_GROUP,
  has   toolbit;

Class   Button
  with  description "They're greek to you.",
  has   scenery readable;

Button  -> blue_button "blue button"
  with  name 'button' 'switch' 'blue',
        before [;
            Push:
                if( self has general ) 
                    "The blue button appears to be jammed.";
                give leak ~concealed;
                move leak to location;
                give self general;
                StartDaemon(leak);
                "There is a rumbling sound and a stream of water appears to
                 burst from the east wall of the room (apparently, a leak 
                 has occurred in a pipe).";
        ];

Button  -> red_button "red button"
  with  name 'button' 'switch' 'red',
        before [;
            Push:
                print "The lights within the room ";
               if( location has light ) {
                    give location ~light;
                    "shut off.";
                } else {
                    give location light;
                    "come on.";
                }
        ];

Button  -> brown_button "brown button"
  with  name 'button' 'switch' 'brown',
        before [;
            Push:
                give dam ~visited;
                give green_bubble ~general;
                "Click.";
        ];

Button  -> yellow_button "yellow button"
  with  name 'button' 'switch' 'yellow',
        before [;
            Push:
                give dam ~visited;
                give green_bubble general;
                "Click.";
        ];

[ FixLeak ;
  StopDaemon(leak);
  "By some miracle of Zorkian technology, you have managed to stop
   the leak in the dam.";
];

[ LeakTable i;
  switch( i ) {
    0: "up to your ankles.";
    1: "up to your shin.";
    2: "up to your knees.";
    3: "up to your hips.";
    4: "up to your waist.";
    5: "up to your chest.";
    6: "up to your neck.";
    7: "over your head.";
    default: "high in your lungs.";
  }
];

Object  leak "leak"
  with  name 'leak' 'drip' 'pipe',
        before [;
            Receive:
                if( noun == viscous_material )
                    return FixLeak();
                rfalse;
            Fix:
                if( second == viscous_material )
                    return FixLeak();
                if( ~~second )
                    "It's not obvious how.";
                "With ", (a) second, "?";
        ],
        number 0,
        daemon [;
            self.number++;
            if( location == parent(self) ) {
                print "The water level here is now up to your ";
                LeakTable(self.number / 2);
            }
            if( self.number > 16 ) {
                StopDaemon(self);
                if( location == maintenance_room ) {
                    give maintenance_room rmungbit;
                    maintenance_room.description = "The room is full of water 
                        and cannot be entered.";
                    if( player in magic_boat )
                        JigsUp("The rising water carries the boat over the dam, 
                          down the river, and over the falls. Tsk, tsk.");
                    JigsUp("I'm afraid you have done drowned yourself.^");
                }
            }
        ],
  has   concealed scenery;

Room    dam_lobby "Dam Lobby"
  with  description "This room appears to have been the waiting room for
          groups touring the dam. There are open doorways here to
          the north and east marked ~Private~, and there is a path
          leading south over the top of the dam.",
        name 'doorways' 'waiting',
        s_to dam,
        e_to [;
            if( leak in maintenance_room && leak.number > 12 )
                "The room is full of water and cannot be entered.";
          return maintenance_room;
        ],
        n_to [;
            if( leak in maintenance_room && leak.number > 12 )
                "The room is full of water and cannot be entered.";
          return maintenance_room;
        ],
  has   dry_land light;

Object  -> matchbook "matchbook"
  with  text_string "^(Close cover before striking)^^YOU too can make BIG
          MONEY in the exciting field of PAPER SHUFFLING!^^Mr.
          Anderson of Muddle, Mass. says: ~Before I took this course
          I was a lowly bit twiddler. Now with what I learned at GUE
          Tech I feel really important and can obfuscate and confuse
          with the best.~^^Dr. Blank had this to say: ~Ten short
          days ago all I could look forward to was a dead-end job as
          a doctor. Now I have a promising future and make really
          big Zorkmids.~^^GUE Tech can't promise these fantastic
          results to everyone. But when you earn your degree from
          GUE Tech, your future will be brighter.^",
        initial "There is a matchbook whose cover says ~Visit Beautiful
          FCD#3~ here.",
        size 2,
        time_left 0,
        number 6,
        time_out [;
            give self ~light ~flame;
            "The match has gone out.";
        ],
        before [;
            Burn, SwitchOn:
                if( self.number <= 0 )
                    "I'm afraid that you have run out of matches.";
                self.number--;
                if( location == drafty_room or timber_room )
                    "This room is drafty, and the match goes out instantly.";
                give self flame light;
                StartTimer(self, 1);
                "One of the matches starts to burn.";
            SwitchOff:
                if( self hasnt flame ) rfalse;
                give self ~flame ~light;
                StopTimer(self);
                "The match is out."; 
          Open, Count:
                print "You have ";
                switch( self.number ) {
                    0: print "no matches";
                    1: print "1 match";
                    default: print self.number, " matches";
                }
                ".";
        ],
        description [;
            if( self has light )
                "The match is burning.";
            "The matchbook isn't very interesting, except for what's written
             on it.";
        ],
        name 'match' 'matches' 'matchbook',
  has   readable;

Object  -> tour_guidebook "tour guidebook"
  with  description "~  Flood Control Dam #3^^FCD#3 was constructed in year 783
          of the Great Underground Empire to harness the mighty
          Frigid River. This work was supported by a grant of 37
          million zorkmids from your omnipotent local tyrant Lord
          Dimwit Flathead the Excessive. This impressive structure
          is composed of 370,000 cubic feet of concrete, is 256 feet 
          tall at the center, and 193 feet wide at the top. The lake
          created behind the dam has a volume of 1.7 billion cubic
          feet, an area of 12 million square feet, and a shore line
          of 36 thousand feet.^^We will now point out some of the
          more interesting features of FCD#3 as we conduct you on a
          guided tour of the facilities:^        1) You start your
          tour here in the Dam Lobby. You will notice on your right
          that....",
        initial "Some guidebooks entitled ~Flood Control Dam #3~ are on
          the reception desk.",
        name 'guide' 'book' 'books' 'guidebook' 'tour',
  has   readable flammable;

Object  -> reception_desk "reception desk"
  with  name 'reception' 'desk'
  has   scenery supporter open;

[ Dummy;
  switch( random(3) ) {
    1: "Look around.";
    2: "Too late for that.";
    3: "Have your eyes checked.";
  }
];

[ PickOne tbl;
  return tbl-->random(tbl-->0);
];

Include "VerbLib";

[ MumbleSub; "You'll have to speak up if you expect me to hear you!"; ];

[ RepentSub; "It could very well be too late!"; ];

[ RingSub; "How, exactly, can you ring that?"; ];

[ WinSub; 
  "Naturally!"; 
];

[ WindUpSub; "You cannot wind up ", (a) noun, "."; ];

[ WishSub; "With luck, your wish will come true."; ];

[ YellSub; "Aaaarrrrgggghhhh!"; ];

[ HatchSub; "Bizarre!"; ];

[ CrossSub; "You can't cross that!"; ];

[ BackSub; "Sorry, my memory is poor. Please give a direction."; ];

[ BlastSub; "You can't blast anything by using words."; ];

[ MakeSub; "You can't do that."; ];

[ MeltSub; "It's not clear that ", (a) noun, " can be melted."; ];

[ CleanSub; "If you wish, but heaven only knows why."; ];

[ BugSub; "Bug? Not in a flawless program like this! (Cough, cough)."; ];

[ BarfSub; "Preposterous!"; ];

[ DeflateSub; "Come on, now!"; ];

[ PickSub; "You can't pick that."; ];

[ PlaySub; "That's silly!"; ];

[ XyzzySub; "A hollow voice says ~Fool.~"; ];

[ SpinSub; "You can't spin that!"; ];

[ MySearchSub; "You find nothing unusual."; ];

[ ThrowOverSub; "You can't throw anything off of that!"; ];

[ StaySub; "You will be lost without me!"; ];

[ SmellSub; "It smells like ", (a) noun, "."; ];

[ ChantSub; "The incantation echoes back faintly, but nothing else happens."; ];

[ InflateSub; "How can you inflate that?"; ];

[ KissSub; "I'd sooner kiss a pig."; ];

[ ListenSub; print_ret (The) noun, " makes no sound."; ];

[ LockSub; "It doesn't seem to work."; ];

[ HideSub; print_ret "That hiding place is too obvious."; ];

[ FollowSub; "You're nuts!"; ];

[ FrobozzSub;
  "The FROBOZZ Corporation created, owns, and operates this dungeon.";
];

[ BanishSub; "What a bizarre concept!"; ];

[ WalkAroundSub; "Use compass directions for movement."; ];

[ PushSub;
  if( ObjectIsUntouchable(noun) ) 
    rtrue;

  if( noun in player )
    "You aren't an accomplished enough juggler.";
  if( noun has static || noun has scenery )
    "You can't move ", (the) noun, ".";
  "Moving ", (the) noun, " reveals nothing.";
];

[ GreaseSub ;
  if( second == viscous_material )
    "The all-purpose gunk isn't a lubricant.";
  "You probably put spinach in your gas tank, too.";
];

[ PraySub ;
  if( location == altar )
    return PlayerTo(forest1, 1);
  "If you pray enough, your prayers may be answered.";
];

[ ReadSub;
  if( noun hasnt readable )
    "How does one read ", (a) noun, "?";
  if( noun provides text_string )
    PrintOrRun(noun, text_string);
  else if( noun provides description )
    PrintOrRun(noun, description);
  rtrue;
];

[ LowerSub;
  return HackHack("Playing in this way with the ");
];

[ RaiseSub;
  return HackHack("Playing in this way with the ");
];

[ BlowSub;
  << Inflate noun blast_of_air >>;
];

[ EmptyNoun i;
  i = child(noun);
  while( i ) {
    if( location hasnt dry_land )
      remove i;
    else if( location == up_a_tree )
      move i to forest_path;
    else
      move i to location;
    i = child(noun);
  }
];

[ ShakeSub;
  if( noun has animate )
    "This seems to have no effect.";
  if( noun has static or scenery )
    "You can't take it; thus, you can't shake it!";
  if( noun hasnt container )
    "Shaken.";
  if( noun hasnt open ) {
    if( child(noun) )
      "It sounds like there is something inside ", (the) noun, ".";
    else
      print_ret (The) noun, " sounds empty.";
  }
  if( ~~child(noun) )
    "Shaken.";
  EmptyNoun();
  print "The contents of ", (the) noun, " spill ";
  if( location has dry_land )
    "to the ground.";
  else
    "out and disappears.";
];

[ JumpSub; 
  switch( random(4) ) {
    1: "Very good. Now you can go to the second grade.";
    2: "Are you enjoying yourself?";
    3: "Wheeeeeeeeee!!!!!";
    default: "Do you expect me to applaud?";
  }
];

[ SprayOnSub ;
  return SqueezeSub();
];

[ SqueezeSub;
  if( noun has animate )
    print_ret (The) noun, " does not understand this.";
  "How singularly useless.";
];

[ SendForSub;
   if( noun has animate )
     "Why would you send for ", (the) noun, "?";
   "That doesn't make sends.";
];

[ DestroySub weap;
  if( second && second hasnt weapon )
    "Trying to destroy ", (a) noun, " with ", (a) second, " is futile.";
  weap = HasWeapon(player);
  if( weap )
    << Attack noun weap >>;
  "No doubt you propose to stab ", (the) noun, " with your pinky?";
];

[ PokeSub;
  return DestroySub();
];

[ StrikeSub;
  if( noun has animate )
   "Since you aren't versed in hand-to-hand combat, you'd better attack ",
    (the) noun, " with a weapon.";
  << SwitchOn noun >>;
];

[ SwingSub;
  if( second ~= 0 )
    << Attack second noun >>;
  print_ret "Whoosh!";
];

[ TempleSub;
  if( location == temple )
    PlayerTo(treasure_room);
  else if( location == treasure_room )
    PlayerTo(temple);
  else
    "Nothing happens.";
  rtrue;
];

[ ClimbDownSub; return ClimbUpSub(d_to, noun); ];

[ ClimbSub; return ClimbUpSub(u_to, noun); ];

[ ClimbUpSub dir obj; ! pnum paddr lv4;
  if( ~~dir )
    dir = u_to;
  if( obj == 0 && noun ~= 0 )
    obj = noun;
  if( location provides dir ) {
  }

!     if( obj ~= 0 || noun == 0 ) ?label1;
!     obj = noun;
!  .label1;
!     paddr = location.dir.&;
!     if( paddr == 0 ) ?label2;
!     if( obj == 0 ) ?label3;
!     pnum = paddr.#;
!     if( pnum == 2 ) ?label4;
!     if( pnum ~= 4 and 5 and 1 || InRoomContains(noun, (paddr->0)) ~= 0 ) ?label3;
!  .label4;
!     print "The ";
!     print (string) obj;
!     print " do";
!     if( obj == 73 ) ?label5;
!     print "es";
!  .label5;
!     print "n't lead ";
!     if( dir ~= 23 ) ?label6;
!     print "up";
!     jump label7;
!  .label6;
!     print "down";
!  .label7;
!     print_ret "ward.";
!  .label3;
!     PlayerToProp(dir);
!     rtrue;
!  .label2;
!     if( obj ~= 0 ) ?label8;
!     print_ret "You can't go that way.";
!  .label8;
!     if( obj == 0 ) ?label9;
!     pnum = noun.name.&;
!     if( ZMemQ(19813, pnum, (pnum.#)) == 0 ) ?label9;
!     print_ret "Climbing the walls is to no avail.";
!  .label9;
!     print_ret "You can't do that!";
];

[ IsOnSub;
  if( noun notin second )
    "No, it isn't.";
  print "Yes, it is ";
  if( second has supporter )
    print "on";
  else
    print "in";
  print_ret (the) second, ".";
];

[ KickSub;
     return HackHack("Kicking the ");
];

[ KnockSub;
  if( noun has door )
    "Nobody's home.";
  "Why knock on ", (a) noun, "?";
];

[ LaunchSub ob;
  if( noun == 0 && parent(player) has enterable ) {
    ob = parent(player);
    << Launch ob >>;
  }
  if( noun && noun has vehicle )
    "You can't launch that by saying ~launch~!";
  "That's pretty weird.";
];

[ TieSub;
  if( second == player )
    "You can't tie anything to yourself.";
  "You can't tie ", (the) noun, " to that.";
];

[ TieWithSub;
  if( second == rope ) {
    if( noun hasnt animate )
      "Why would you tie up ", (a) noun, "?";
    if( noun == bat )
      "You can't reach him; he's on the ceiling.";
    if( ~~(noun provides strength) || noun.strength >= 0 )
      "Why would you tie up ", (a) noun, "?";
    print "Your attempt to tie up ", (the) noun, " awakens him.^";
    return CheckStrength(noun);
  }
  "You could certainly never tie it with that!";
];

[ PutUnderSub;
  "You can't do that.";
];

[ DisenchantSub;
  "Nothing happens.";
];

[ DrinkFromSub o;
  objectloop( o in noun ) {
    if( o has drinkable )
      << Drink o >>;
  }
  "How peculiar!";
];

[ EnchantSub;
     return DisenchantSub();
];

[ Dive_msg;
  switch( random(3) ) {
    1: return "You should have looked before you leaped.";
    2: return "In the movies, your life would be passing before your eyes.";
    default: return "Geronimo...";
  }
];

[ DiveSub;
  if( noun ) {
    if( noun has animate )
      print_ret (The) noun, "is too big to jump over.";
    if( noun notin location )
      "That would be a good trick.";
    return JumpSub();
  }
  if( location == up_a_tree ) {
    print "In a feat of unaccustomed daring, you manage to land on your 
	   feet without killing yourself.^^";
    PlayerTo(forest_path);
    rtrue;
  }
  if( location == canyon_view or rocky_ledge ) {
    print "This was not a very safe place to try jumping.^";
    return JigsUp(Dive_msg());
  }
  JumpSub();
];

[ WalkToSub; 
  if( InRoomContains(noun, location) )
    "You should supply a direction!";
  "It's here!";
];

[ OdysseusSub;
  if( location == cyclops_room && cyclops in location && cyclops hasnt general ) {
    StopDaemon(cyclops);
    give cyclops general;
    give strange_passage general;
    give cyclops ~fightbit;
    remove cyclops;
    "The cyclops, hearing the name of his father's deadly nemesis, flees the 
     room by knocking down the wall on the east of the room.";
  }
  "Wasn't he a sailor?";
];

[ HelloSub;
  if( ~~noun ) {
    switch( random(4) ) {
      1: "Hello.";
      2: "Good day.";
      3: "Nice weather we've been having lately.";
      default: "Goodbye.";
    }
  }
  if( noun has animate )
    print_ret (The) noun, " bows his head to you in greeting.";
  print_ret "It's a well known fact that only schizophrenics say ~Hello~
	     to ", (a) noun, ".";
];

[ DisembarkSub;
  if( noun && player notin noun )
    "You're not in that.";
  if( location hasnt dry_land )
    "You realize that getting out here would be fatal.";
  << Exit >>;
];

[ SitOnSub;
  << Enter noun >>;
];

[ WhatIsSub;
];

[ EchoSub;
];

[ CommandSub;
];

[ ThrowSub;
];

[ PourSub;
  if( noun ofclass Water_Quantity ) {
    remove noun;
    Water_Quantity.destroy(noun);
    if( second has flame && second has light ) {
      give second ~flame ~light;
      print_ret (The) second, " is extinguished.";
    }
    "The water spills over ", (the) second, ", to the floor, and evaporates.";
  }
  if( noun == viscous_material )
    << Insert viscous_material second >>;
  "You can't pour that.";
];

[ ThrowOverboardSub env;
  env = parent(player);
  if( env has enterable ) {
    move noun to parent(env);
    "Ahoy -- ", (object) noun, " overboard!^";
  }
  "You're not in anything!";
];

[ Ho_hum;
  switch( random(3) ) {
    1: return " doesn't seem to work.";
    2: return " isn't notably helpful.";
    default: return " has no effect.";
  }
];

[ HackHack str;
  print_ret (string) str, (object) noun, (string) Ho_hum();
];

[ ReadPageSub;
  << Read noun >>;
];

[ FindItemWithAttr itm attr obj ;
  obj = child(itm);
  while( true ) {
    if( ~~obj )
      rfalse;
    if( obj has attr && obj hasnt concealed && obj ~= player )
      return obj;
    obj = sibling(obj);
  }
];

[ FindOneItemWithAttr itm attr obj cnt o;
  obj = child(itm);
  while( obj ) {
    if( obj has attr && obj ~= player ) {
      cnt++;
      o = obj;
    }
    obj = sibling(obj);
  }
  if( cnt == 1 )
    return o;
  rfalse;
];

[ AttackSub o;
  if( noun hasnt animate )
    "I've known strange people, but fighting ", (a) noun, "?";
  if( ~~second ) {
    o = FindOneItemWithAttr(player, weapon);
    if( o ) {
      print "(with ", (the) o, ")^";
      << Attack noun o >>;
    }
  } else
    o = second;
  if( ~~o || o == pair_of_hands )
    "Trying to attack ", (a) noun, " with your bare hands is suicidal.";
  if( o notin player )
    "You aren't even holding ", (the) o, ".";
  if( o hasnt weapon )
    "Trying to attack ", (the) noun, " with ", (a) o, " is suicidal.";
  if( o == rusty_knife ) 
    return JigsUp("As the knife approaches its victim, your mind is submerged 
                   by an overmastering will. Slowly, your hand turns, until 
                   the rusty blade is an inch from your neck. The knife seems 
                   to sing as it savagely slits your throat.");
  if( RunLife(noun, ##Attack) )
    rtrue;
  HeroBlow();
  rtrue;
];

[ LookUnderSub ;
  "There is nothing but dust there.";
];

[ GeronimoSub;
  if( player in barrel ) 
    return JigsUp("I didn't think you would REALLY try to go over the falls 
      in a barrel. It seems that some 450 feet below, you were met by a 
      number of unfriendly rocks and boulders, causing your immediate 
      demise. Is this what 'over a barrel' means?");
  "Wasn't he an Indian?";
];


[ DiagnoseSub my_str wounds remaining_str curetime ;
  if( Dead )
    "You are dead.";
  my_str = FightStrength(0);
  wounds = player.strength;
  remaining_str = my_str + wounds;
  if( QueueInterrupt(HealFunction)-->0 == 0 )
    wounds = 0;
  else
    wounds = 0 - wounds;
  if( ~~wounds )
    print "You are in perfect health.";
  else {
    print "You have ";
    if( wounds == 1 ) print "a light wound,";
    if( wounds == 2 ) print "a serious wound,";
    if( wounds == 3 ) print "several wounds,";
    if( wounds > 3 ) print "serious wounds,";
    print " which will be cured after ";
    curetime = 30 * (wounds - 1);

    print (curetime + QueueInterrupt(HealFunction)-->1), " moves.";
  }
  new_line;

  print "You ";
  if( ~~remaining_str )
    print "can expect death soon";
  else if( remaining_str == 1 )
    print "can be killed by one more light wound";
  else if( remaining_str == 2 )
    print "can be killed by a serious wound";
  else if( remaining_str == 3 )
    print "can survive one serious wound";
  else if( remaining_str > 3 )
    print "are strong enough to take several wounds";
  if( Deaths ) {
    print ".^You have been killed ";
    if( Deaths == 1 )
      print "once";
    else 
      print "twice";
  }
  ".";
];
!
![ LandSub;
!  if( location provides land_to ) {
!    if( location.land_to > 4096 )
!      return PrintOrRun(location, land_to);
!! Go there
!  }
!  "You can't go that way.";
!];
    
[ PreBurnSub src;
  if( second )
    src = second;
  else {
    src = FindItemWithAttr(location, flame);
    if( src == 0 ) 
      src = FindItemWithAttr(player, flame);
    if( src )
      print "(with ", (the) src, ")^";
  }
  if( ~~src ) {
    print "You have nothing with which to burn ", (the) noun, ".^";
    rfalse;
  }
  if( src hasnt flame || src hasnt light ) {
    print "With ", (a) src, "??!?^";
    rfalse;
  }
  return src;
];
   
[ BurnSub src;
  src = PreBurnSub();
  if( ~~src )
    rtrue;
  if( ~~second ) 
    << Burn noun src >>;
  if( noun hasnt flammable )
    "You can't burn ", (a) noun, ".";
  print (The) noun, " catches fire";
  if( noun in player || player in noun ) {
    remove noun;
    print ". Unfortunately, you were ";
    if( noun in player )
      print "holding";
    else
      print "in";
    JigsUp(" it at the time.");
    rtrue;
  }
  remove noun;
  " and is consumed.";
];

[ FillSub o;
  if( second )
    o = second;
  else
    o = FindItemWithAttr(location, drinkable);
  if( ~~o )
    "There is nothing to fill it with.";
  << Insert o noun >>;
]; 

[ MyScoreSub;
  if( Dead )
    << FullScore >>;
  return ScoreSub();
];

[ FindSub env;
  env = parent(noun);
  if( noun == player ) "You're around here somewhere...";
  if( noun in player ) "You find it.";
  if( noun in location ) "It's right here.";
  if( env has animate ) "The ", (name) env, " has it.";
  if( env has supporter ) "It's on ", (the) env, ".";
  if( env has container ) "It's in ", (the) env, ".";
  if( noun == pair_of_hands or blast_of_air )
    "Within six feet of your head, assuming you haven't left that somewhere.";
  "Beats me.";
];

[ CountSub;
  ! if( noun == blessings ) "Well, for one, you are playing Zork...";
  "You have lost your mind.";
];

[ LookUnderSub; "There is nothing but dust there."; ];

[ LookBehindSub; "There is nothing behind ", (the) noun, "."; ];

[ LookInSub;
    if( noun has door ) {
        if( noun has open )
            print_ret (The) noun, " is open, but I can't tell what's beyond it.";
        print_ret (The) noun, " is closed.";
    }
    if( noun has container ) {
        if( noun has animate )
            "There is nothing special to be seen.";
        if( noun hasnt open )
            print_ret (The) noun, " is closed.";
        if( ~~child(noun) )
            print_ret (The) noun, " is empty.";
        << Search noun >>;
    }
    "You can't look inside ", (a) noun, ".";
];

[ PrintRank;
  print ".^This gives you the rank of ";
  if( score >= 1000 ) print "Master Adventurer";
  else if( score >= 750 ) print "Wizard";
  else if( score >= 600 ) print "Master";
  else if( score >= 400 ) print "Adventurer";
  else if( score >= 200 ) print "Junior Adventurer";
  else if( score >= 100 ) print "Novice Adventurer";
  else if( score >= 50 ) print "Amateur Adventurer";
  else print "Beginner";
  ".";
];

[ FullScoreSub i;
  if( Dead && action == ##FullScore )
    "You're dead! How can you think of your score?";
  ScoreSub();

  if( ~~score ) rfalse;
  new_line;

  L__M(##FullScore,1);

  for( i=0 : i < NUMBER_TASKS : i++ )
    if( task_done->i == 1 ) {
      PANum(task_scores->i);
      PrintTaskName(i);
    }

  if( things_score ) {
    PANum(things_score);
    L__M(##FullScore,2);
  }
  if( places_score ) {
    PANum(places_score);
    L__M(##FullScore,3);
  }
  if( trophy_case.number ) {
    PANum(trophy_case.number);
    print "storing items in the trophy case^";
  }
  if( Deaths ) {
    PANum(Deaths * -10);
    print "penalty for having died ";
    LanguageNumber(Deaths);
    if( Deaths > 1 )
      print " times";
    else
      print " time";
  }
  new_line;
  PANum(score);
  L__M(##FullScore,4);
];

[ DarkToDark;
  return JigsUp("Oh, no! A lurking grue slithered into the room and
             devoured you!");
];

[ ZorkSub; "At your service!"; ];

[ BlowSub;
  << Inflate noun blast_of_air >>;
];

[ MolestSub; "What a (ahem!) strange idea."; ];

[ BrandishSub; return HackHack("Waving the "); ];

[ FixSub; "This has no effect."; ];

[ UntieSub; "This cannot be tied, so it cannot be untied!"; ];


[ ADirection; if( noun in compass ) rtrue; rfalse; ];

Verb 'zork'
		*				-> Zork;
Verb 'scream' 'yell' 'shout'
		*				-> Yell;
Verb 'sleep' 'nap'
		*				-> Sleep;
Verb 'wish'
		*				-> Wish;
Verb 'wind'
		* 'up' held			-> WindUp
		* held				-> WindUp;
Verb 'win' 'winnage'
		*				-> Win;
Verb 'wear' 'don'
		* held				-> Wear;
Verb 'wave' 'brandish' 'aim' 'point'
		* held 'at' creature		-> Brandish
		* held				-> Brandish;
Verb 'walk' 'go' 'run' 'proceed' 'step'
		* 				-> VagueGo
		* noun=ADirection		-> Go
		* 'away' noun=ADirection	-> Go
		* 'into'/'in'/'through' noun 	-> Enter
		* 'up' noun			-> ClimbUp
		* 'down' noun			-> ClimbDown
		* 'over' noun			-> Cross		
		* 'back'			-> Back
		* 'to' noun			-> WalkTo
		* 'around' noun			-> WalkTo;
Verb 'leave'
		*				-> VagueGo
		* noun=ADirection		-> Go
		* noun				-> Disembark
		* 'into'/'in'/'inside'/'through' noun
						-> Enter;
Verb 'wake' 'awake' 'awaken' 'startle' 'surprise'
		*				-> Wake
		* 'up'				-> Wake
		* creature			-> WakeOther
		* creature 'up'			-> WakeOther
		* 'up' creature			-> WakeOther;
Verb 'untie' 'unattach' 'unfasten' 'unhook' 'unsecure'
		* noun				-> Untie
		* noun 'from' 'noun'		-> Untie;
Verb 'unlock'
		* noun 'with'/'using' held	-> Unlock;
Verb 'temple' 'treasure'
		* 				-> Temple;
Verb 'stay'	*				-> Stay;
Verb 'smell' 'sniff'
		*				-> Smell
		* noun				-> Smell;
Verb 'odysseus' 'ulysses'
		*				-> Odysseus;
Verb 'geronimo'
		*				-> Geronimo;
Verb 'mumble' 'sigh' 'mutter'
		*				-> Mumble;
Verb 'melt' 'liquify'
		* noun 'with' held		-> Melt;
Verb 'make' 	* noun				-> Make;
Verb 'lubricate' 'grease' 'oil'
		* noun 'with' noun		-> Grease;
Verb 'lower' 	* noun				-> Lower;
Verb 'raise' 'lift'
		* 'up' noun			-> Raise
		* noun				-> Raise;
Verb 'rape' 'molest'
		* creature			-> Molest;
Verb 'repent' 	*				-> Repent;
Verb 'pray' 	* 				-> Pray;
Verb 'think' 	*				-> Think;
Verb 'Repent' 	* 				-> Repent;
Verb 'xyzzy' 'plugh'
		*				-> Xyzzy;
Verb 'play'	
		* noun				-> Play;
Verb 'knock' 'rap'
		* 'on'/'at' noun		-> Knock;
Verb 'kiss' 'embrace' 'hug'
		* creature			-> Kiss;
Verb 'hello' 'hi'
		*				-> Hello
		* creature			-> Hello; 
Verb 'hatch' 	* noun				-> Hatch;
Verb 'jump' 'skip' 'hop'
		*				-> Jump
		* 'off'				-> Dive
	        * noun				-> Cross
		* 'over' noun			-> Cross;
Verb 'pick'
		* 'up' multi			-> Take
		* multi 'up'			-> Take
		* noun				-> Pick
		* noun 'with' held		-> Pick;
Verb 'deflate'	* noun				-> Deflate;
Verb 'disembark'
		* noun				-> Disembark;
Verb 'disenchant'
		* noun				-> Disenchant;
Verb 'cross' 'ford'
		* noun				-> Cross
		* 'over' noun			-> Cross;
Verb 'count'	* noun				-> Count;
Verb 'command'	* creature			-> Command;
Verb 'close' 'shut' 'cover'
		* noun				-> Close
		* 'up' noun			-> Close
		* 'off' noun			-> SwitchOff;
Verb 'chant' 'incant'
		*				-> Chant; 
Verb 'spin'
		* noun				-> Spin;
Verb 'send' 	* 'for' noun			-> SendFor;
Verb 'shake' 	* held				-> Shake;
Verb 'is' 	* noun 'in'/'on' noun		-> IsOn;
Verb 'drink' 'swallow' 'sip' 'imbibe' 'quaff'
		* noun				-> Drink
		* 'from' noun			-> DrinkFrom;
Verb 'eat' 'consume' 'bite'
		* held				-> Eat;
Verb 'taste' 	* held				-> Taste;
Verb 'echo'	*				-> Echo;
Verb 'enchant'	* noun				-> Enchant;
Verb 'look' 'l//' 'gaze' 'stare'
		*				-> Look
		* 'at' noun			-> Examine
		* 'at' noun 'with' held		-> Read
		* 'inside'/'in'/'into'/'through'/'with'/'on' noun
						-> LookIn
		* 'under' noun			-> LookUnder
		* 'behind' noun			-> LookBehind
		* 'for' noun			-> Find
		* 'up' topic 'in' noun		-> Consult;
Verb 'consult'	* noun 'about' topic		-> Consult
		* noun 'on' topic		-> Consult;
Verb 'lock'
		* noun 'with' noun		-> Lock;
Verb 'launch'	
		* 				-> Launch
		* noun				-> Launch;
Verb 'ring' 'peal'
		* noun				-> Ring
		* noun 'with' noun		-> Ring;
Verb 'stand'
		*				-> Disembark
		* 'up'				-> Disembark
		* 'on'/'in' noun		-> Enter;
Verb 'tie' 'attach' 'fasten' 'secure'
		* noun				-> Tie
		* noun 'to' noun		-> Tie
		* 'up' creature 'with' noun	-> TieWith;
Verb 'fix'
		* noun				-> Fix
		* noun 'with' noun		-> Fix
		* noun 'to' noun		-> Tie;
Verb 'swim' 'bath' 'wade'
		*				-> Swim
		* 'in' noun			-> Swim;
Verb 'squeeze' 'squash'
		* noun 				-> Squeeze
		* noun 'on' noun		-> Squeeze;
Verb 'spray'
		* held 'on' noun		-> SprayOn
		* noun 'with' held		-> SprayOn reverse;
Verb 'take' 'carry' 'grab' 'hold' 'catch'
		* multi				-> Take
		* 'up'/'on' multi		-> Take
		* 'off' worn			-> Disrobe
		* multiinside 'from' noun	-> Remove
		* multiinside 'off' noun	-> Remove
		* 'out' multiinside		-> Remove
		* multiinside 'out' 'of' noun	-> Remove
		* 'inventory'			-> Inv;
Verb 'get'	* 'out'/'off'/'up'		-> Disembark
		* multi				-> Take
		* 'in'/'into'/'on'/'onto' noun	-> Enter
		* 'off' noun			-> Disembark
		* multiinside 'from' noun	-> Remove;
Verb 'climb' 'scale'
		* noun				-> Climb
		* 'up'/'over' noun		-> ClimbUp
		* 'down' noun			-> ClimbDown
		* 'out'				-> Disembark
		* 'in'/'on' noun		-> Enter;
Verb 'board'
		* noun				-> Enter;
Verb 'shit' 'fuck' 'damn' 'sod' 'curse'
		*				-> Strong
		* topic				-> Strong;
Verb 'bother' 'curses' 'drat' 'darn'
		*				-> Mild
		* topic				-> Mild;
Verb 'shed' 'doff' 'disrobe'
		* held				-> Disrobe; 
Verb 'remove'
		* held				-> Disrobe
		* multi				-> Take
		* multiinside 'from' noun	-> Remove;
Verb 'give' 'pay' 'offer' 'feed' 'donate' 'hand'
		* held 'to' creature             -> Give
		* creature held                  -> Give reverse
		* 'over' held 'to' creature      -> Give;
Verb 'empty'
		* noun				-> Empty
		* 'out' noun			-> Empty
		* noun 'out'			-> Empty
		* noun 'to'/'into'/'on'/'onto' noun
						-> EmptyT;
Verb 'show' 'present' 'display'
		* creature held                  -> Show reverse
		* held 'to' creature             -> Show;
Verb 'drop' 'discard' 'release'
		* multiheld			-> Drop
		* multiexcept 'in'/'into'/'down' noun
						-> Insert
		* multiexcept 'on'/'onto' noun	-> PutOn;
Verb 'throw' 'toss' 'hurl' 'chuck'
		* held 'over'/'across'		-> ThrowOver
		* held 'off' noun		-> ThrowOverboard
		* held 'overboard'		-> ThrowOverboard
		* multiexcept 'in' noun		-> Insert
		* held 'at'/'against'/'on'/'onto' noun
						-> ThrowAt;
Verb 'insert' 'stuff'
		* multiexcept 'in'/'into' noun   -> Insert;
Verb 'put' 'place'
		* multiexcept 'in'/'inside'/'into' noun
						-> Insert
		* multiexcept 'on'/'onto' noun	-> PutOn
		* multiexcept 'under' noun	-> PutUnder
		* multiexcept 'behind' noun	-> Hide
		* 'on' held			-> Wear
		* 'down' multiheld		-> Drop
		* multiheld 'down'		-> Drop;
Verb 'hide'
		* 				-> Hide
		* 'behind'/'in'/'under' noun	-> Hide
		* multiexcept 'in'/'inside'/'into' noun
						-> Insert
		* multiexcept 'on'/'onto' noun	-> PutOn
		* 'out' noun			-> SwitchOff;
Verb 'enter'
		*				-> GoIn
		* noun				-> Enter;
Verb 'dive'
		* 'over'/'across' noun		-> Cross
		* 'in' noun			-> Swim
		* 'off'/'from' noun		-> Dive;
Verb 'kick'
		* noun				-> Kick
		* 'off' noun			-> Kick;
Verb 'frobozz'
		*				-> Frobozz;
Verb 'transfer'
		* noun 'to' noun		-> Transfer;
Verb 'inventory' 'inv' 'i//'
		*				-> Inv
		* 'tall'			-> InvTall
		* 'wide'			-> InvWide;
Verb 'in' 'inside'
		*				-> GoIn;
Verb 'examine' 'x//' 'watch' 'describe' 'check'
		* noun				-> Examine;
Verb 'what'
		* 'is' topic			-> WhatIs;
Verb 'whats'
		* topic				-> WhatIs
		* 'in'/'on' noun		-> LookIn;
Verb 'where'
		* 'is' noun			-> Find;
Verb 'douse' 'extinguish'
		* noun				-> SwitchOff;
Verb 'yes' 'y//'
		*				-> Yes;
Verb 'no'
		*				-> No;
Verb 'sorry'
		*				-> Sorry;
Verb 'pull' 'drag' 'yank' 'tug'
		* noun				-> Pull
		* 'up'/'on' noun		-> Raise;
Verb 'roll'
		* noun				-> Pull
		* 'up' noun			-> Push;
Verb 'touch' 'fondle' 'feel' 'grope' 'pet' 'pat'
		* noun				-> Touch
		* noun 'with' held		-> Touch;
Verb 'read' 'skim'
		* noun				-> Read
		* 'from'/'over'/'in' noun	-> Read
		* noun 'with' held		-> Read
		* noun number			-> ReadPage
		* 'about' topic 'in' noun	-> Consult
		* topic 'in' noun		-> Consult;
Verb 'pump'
		* 'up' noun			-> Inflate
		* 'up' noun 'with' held		-> Inflate;
Verb 'inflate'
		* noun				-> Inflate
		* noun 'with' held		-> Inflate;
Verb 'blow'
		* noun				-> Blow
		* 'in' noun			-> Blow
		* 'out' noun			-> SwitchOff
		* 'up' noun			-> Blast
		* 'up' noun 'with' held		-> Inflate;
Verb 'blast'
		* 				-> Mild
		* noun				-> Blast;
Verb 'back'	*				-> Back;
Verb 'bug'	*				-> Bug
		* topic				-> Bug;
Verb 'vomit' 'barf' 'chomp'
		*				-> Barf;
Verb 'burn' 'incinerate' 'ignite'
		* noun				-> Burn
		* noun 'with' noun		-> Burn
		* 'down' noun 'with' noun	-> Burn;
Verb 'light' 'activate'
		* noun				-> SwitchOn
		* noun 'with' noun		-> Burn;
Verb 'chase' 'follow' 'pursue' 'come'
		*				-> Follow
		* noun				-> Follow;
Verb 'find' 'seek' 'see'
		* noun				-> Find;
Verb 'open' 'unwrap' 'uncover' 'undo'
		* noun				-> Open
		* 'up' noun			-> Open
		* noun 'with' held		-> Unlock;
Verb 'break'
		* noun				-> Destroy
		* 'in'/'into' noun		-> Open;
Verb 'damage' 'destroy' 'smash' 'block' 'crack' 'wreck'
		* noun				-> Destroy
		* noun 'with' noun		-> Destroy
		* 'down' noun 'with' noun	-> Destroy;
Verb 'exit' 'out' 'outside'
		*				-> Exit
		* noun				-> Disembark;
Verb 'dig'	* noun				-> Dig
		* noun 'with' held		-> Dig
		* 'in' noun 'with' held		-> Dig;
Verb 'search'
		* noun				-> MySearch
		* 'in' noun			-> MySearch
		* 'for' noun			-> Find;
Verb 'wait' 'z//'
		*				-> Wait;
Verb 'sing'
		*				-> Sing;
Verb 'hear' 'listen'
		* noun				-> Listen
		* 'to'/'for' noun		-> Listen;
Verb 'rub' 'shine' 'polish' 'sweep' 'clean' 'dust' 'wipe' 'scrub'
		* noun				-> Clean
		* noun 'with' noun		-> Clean;
Verb 'cut' 'slice' 'prune' 'chop'
		* noun				-> Cut
		* noun 'with' held		-> Cut;
Verb 'attack' 'hit' 'fight' 'injure' 'hurt' 'murder' 'kill' 'punch' 'thump'
		* noun				-> Attack
		* noun 'with' noun		-> Attack;
Verb 'swing'
		* held 'at' noun		-> Attack;
Verb 'sit' 'lie'
		* 'on' 'top' 'of' noun           -> Enter
		* 'on'/'in'/'inside' noun        -> Enter;
Verb 'switch'
		* noun				-> Switchon
		* noun 'on'			-> Switchon
		* noun 'off'			-> Switchoff
		* 'on' noun			-> Switchon
		* 'off' noun			-> Switchoff;
Verb 'turn' 'rotate' 'twist' 'unscrew' 'screw' 'flip' 'set'
		* noun				-> Turn
		* noun 'with' held		-> Turn
		* noun 'to' number		-> ReadPage
		* noun 'to' 'page' number	-> ReadPage
		* noun 'on'			-> Switchon
		* noun 'off'			-> Switchoff
		* 'on' noun			-> Switchon
		* 'on' noun 'with' held		-> Switchon
		* 'off' noun			-> Switchoff;
Verb 'push' 'move' 'shift' 'clear' 'press'
		* noun				-> Push
		* noun 'with' held		-> Turn
		* noun 'under' noun		-> PutUnder
		* noun noun			-> PushDir
		* noun 'to' noun		-> Transfer;
Verb 'fill' 'load'
		* noun				-> Fill
		* noun 'with' noun		-> Fill;
Verb 'stab' 'poke' 'pierce'
		* noun				-> Poke
		* noun 'with' noun		-> Poke;
Verb 'strike'
		* noun				-> Strike;
Verb 'pour' 'spill'
		* noun				-> Pour
		* noun 'on'/'in' noun		-> Pour;
Verb 'banish' 'cast' 'drive' 'exorcise'
		* noun				-> Banish
		* 'away'/'out' noun		-> Banish;
Verb 'answer' 'say' 'speak'
                * topic 'to' creature            -> Answer;
Verb 'tell'
                * creature 'about' topic         -> Tell;
Verb 'ask'
                * creature 'about' topic         -> Ask
                * creature 'for' noun            -> AskFor;

! ----------------------------------------------------------------------------
!  Final task: provide trivial routines if the user hasn't already:
! ----------------------------------------------------------------------------
#Stub TimePasses      0;
#Stub Amusing         0;
#Stub DeathMessage    0;
#Stub DarkToDark      0;
#Stub NewRoom         0;
#Stub LookRoutine     0;
#Stub AfterLife       0;
#Stub GamePreRoutine  0;
#Stub GamePostRoutine 0;
#Stub AfterPrompt     0;
#Stub BeforeParsing   0;
#Stub PrintTaskName   1;
#Stub InScope         1;
#Stub UnknownVerb     1;
#Stub PrintVerb       1;
#Stub ParserError     1;
#Stub ParseNumber     2;
#Stub ChooseObjects   2;
#IFNDEF PrintRank;
Constant Make__PR;
#ENDIF;
#IFDEF Make__PR;
[ PrintRank; "."; ];
#ENDIF;
#IFNDEF ParseNoun;
Constant Make__PN;
#ENDIF;
#IFDEF Make__PN;
[ ParseNoun obj; obj=obj; return -1; ];
#ENDIF;
#Default Story 0;
#Default Headline 0;
#IFDEF INFIX;
#Include "infix";
#ENDIF;

!===============================================================
Verb meta 'score'
                *                                -> MyScore;
Verb meta 'diagnose'
		*				-> Diagnose;
Verb meta 'fullscore' 'full'
                *                                -> FullScore
                * 'score'                        -> FullScore;
Verb meta 'q//' 'quit' 'die'
                *                                -> Quit;
Verb meta 'restore'
                *                                -> Restore;
Verb meta 'restart'
                *                                -> Restart;
Verb meta 'verify'
                *                                -> Verify;
Verb meta 'save'
                *                                -> Save;
Verb meta 'script' 'transcript'
                *                                -> ScriptOn
                * 'off'                          -> ScriptOff
                * 'on'                           -> ScriptOn;
Verb meta 'noscript' 'unscript'
                *                                -> ScriptOff;
Verb meta 'superbrief' 'short'
                *                                -> LMode3;
Verb meta 'verbose' 'long'
                *                                -> LMode2;
Verb meta 'brief' 'normal'
                *                                -> LMode1;
Verb meta 'pronouns' 'nouns'
                *                                -> Pronouns;
Verb meta 'notify'
                * 'on'                           -> NotifyOn
                * 'off'                          -> NotifyOff;
Verb meta 'version'
                *                                -> Version;
#IFNDEF NO_PLACES;
Verb meta 'places'
                *                                -> Places;
Verb meta 'objects'
                *                                -> Objects;
#ENDIF;

#ifdef DEBUG;

Verb meta 'trace'
                *                                -> TraceOn
                * number                         -> TraceLevel
                * 'on'                           -> TraceOn
                * 'off'                          -> TraceOff;
Verb meta 'actions'
                *                                -> ActionsOn
                * 'on'                           -> ActionsOn
                * 'off'                          -> ActionsOff;
Verb meta 'routines' 'messages'
                *                                -> RoutinesOn
                * 'on'                           -> RoutinesOn
                * 'off'                          -> RoutinesOff;
Verb meta 'timers' 'daemons'
                *                                -> TimersOn
                * 'on'                           -> TimersOn
                * 'off'                          -> TimersOff;
Verb meta 'changes'
                *                                -> ChangesOn
                * 'on'                           -> ChangesOn
                * 'off'                          -> ChangesOff;
Verb meta 'recording'
                *                                -> CommandsOn
                * 'on'                           -> CommandsOn
                * 'off'                          -> CommandsOff;
Verb meta 'replay'
                *                                -> CommandsRead;
Verb meta 'random'
                *                                -> Predictable;
Verb meta 'purloin'
                * multi                          -> XPurloin;
Verb meta 'abstract'
                * noun 'to' noun                 -> XAbstract;
Verb meta 'tree'
                *                                -> XTree
                * noun                           -> XTree;
Verb meta 'goto'
                * number                         -> Goto;
Verb meta 'gonear'
                * noun                           -> Gonear;
Verb meta 'scope'
                *                                -> Scope
                * noun                           -> Scope;
Verb meta 'showverb'
                * special                        -> Showverb;
Verb meta 'showobj'
                *                                -> Showobj
                * multi                          -> Showobj;
#endif;
